---
import { availableLocales, Locale } from 'src/utilities/locale/translation';

import Layout from '@layouts/Layout.astro';
import { Hero } from '@design-system/components/Hero';
import {
	getDataLandingSituations,
	LandingSituationPageProps,
} from 'src/utilities/api';
import { ContentBlock } from '@design-system/components/ContentBlock';
import { Layer } from '@design-system/components/Layout/Layer';
import { Retain } from '@design-system/components/Layout/Retain';
import { Heading } from '@design-system/elements/Heading';
import { Stack } from '@design-system/components/Layout/Stack';
import { Story } from '@design-system/components/Story';
import FormSwitch from '@modules/forms/situations/FormSwitch.astro';
import { Sidebar } from '@design-system/components/Layout/Sidebar';
import { CardPrivacy } from '@design-system/components/Card';

export async function getStaticPaths() {
	return await availableLocales.reduce(async (paths, locale) => {
		const collection = await getDataLandingSituations({ locale });
		return [
			...(await paths),
			collection.pages.map((page: LandingSituationPageProps) => ({
				params: { landingSituation: page.slug, locale: locale.id },
				props: {
					pageData: page,
					locale,
				},
			})),
		];
	}, Promise.resolve([]));
}

interface Props {
	pageData: LandingSituationPageProps;
	locale: Locale;
}

const { pageData, locale } = Astro.props;

const translatedStories = pageData.stories
	? pageData.stories.filter(
			(story) => story.headline || story.contentBlocks.length,
	  )
	: [];
---

<Layout locale={locale} metaData={pageData.metaData} mastheadHighlight>
	<Hero
		title={pageData.header.title}
		image={pageData.header.image}
		chapeau={pageData.header.chapeau}
		highlight
	>
		<ContentBlock value={pageData.header.content} />
	</Hero>

	{
		pageData.titleCustom || pageData.question?.header.title ? (
			<Layer pullUpBy="hero" background="ijsblauw">
				<Retain>
					<Heading>
						{pageData.titleCustom || pageData.question.header.title}
					</Heading>
				</Retain>
			</Layer>
		) : null
	}

	{
		translatedStories.length ? (
			<Layer>
				<Retain>
					<Sidebar>
						<Retain variant="text">
							<Stack gap="huge">
								{translatedStories.map((story) => (
									<Story {...story} />
								))}
							</Stack>
						</Retain>

						<CardPrivacy slot="aside" />
					</Sidebar>
				</Retain>
			</Layer>
		) : null
	}

	{
		pageData && pageData.question ? (
			<Layer>
				<Retain>
					<Sidebar>
						<Retain variant="text">
							<FormSwitch
								showMore={pageData.question.showMore}
								type={pageData.question.type}
								answersSingle={pageData.question.answersSingle}
								answersMultiple={pageData.question.answersMultiple}
								buttons={pageData.question.buttons}
								content={pageData.question.content}
								assistance={pageData.question.assistance}
								label={pageData.question.label}
							/>
						</Retain>
						{translatedStories.length ? null : <CardPrivacy slot="aside" />}
					</Sidebar>
				</Retain>
			</Layer>
		) : null
	}
</Layout>
