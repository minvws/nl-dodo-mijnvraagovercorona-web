---
import Layout from '../../../../layouts/Layout.astro';
import {
	availableLocales,
	Locale,
	prefixUrlWithlocale,
} from 'src/utilities/locale/translation';
import { PZALandingPageProps, getDataPZALandingPages } from 'src/utilities/api';
import { Hero } from '@design-system/components/Hero';
import { ContentBlock } from '@design-system/components/ContentBlock';
import Button from '@design-system/elements/Button/Button.astro';
import Stack from '@design-system/components/Layout/Stack/Stack.astro';
import { Retain } from '@design-system/components/Layout/Retain';
import { Layer } from '@design-system/components/Layout/Layer';
import Heading from '@design-system/elements/Heading/Heading.astro';
import { Sidebar } from '@design-system/components/Layout/Sidebar';
import { CardPrivacy } from '@design-system/components/Card';
import { Picture } from '@design-system/components/Picture';
import {
	isContent,
	isPicture,
	isButton,
	isVideo,
} from 'src/utilities/api/queries/translated';

export async function getStaticPaths() {
	const collection = await getDataPZALandingPages();
	return collection.map((page: PZALandingPageProps) => ({
		params: {
			locale: page.localeID,
			theme: page.theme.slug,
		},
		props: {
			pageData: page,
			locale: availableLocales.filter(
				(locale) => locale.id === page.localeID,
			)[0],
		},
	}));
}

interface Props {
	pageData: PZALandingPageProps;
	locale: Locale;
}

const { pageData, locale } = Astro.props;
---

<Layout
	locale={locale}
	metaData={pageData.metaData}
	alternativeTranslations={pageData.alternatives}
>
	<Hero
		title={pageData.hero.title}
		image={pageData.hero.image}
		chapeau={pageData.hero.chapeau}
		highlight
	>
		<Stack class="c-hero__content">
			<ContentBlock value={pageData.hero.content} />
			{
				pageData.buttons ? (
					<ul class="c-hero__wrap-buttons" role="list">
						{pageData.buttons.map((button) => (
							<li>
								<Button
									variant={button.variant}
									href={prefixUrlWithlocale(button.href, locale)}
									icon={button.icon}
								>
									{button.label}
								</Button>
							</li>
						))}
					</ul>
				) : null
			}
			<ContentBlock value={pageData.contentSecondary} />
		</Stack>
	</Hero>

	<Layer pullUpBy={'hero'}>
		<Retain>
			<Sidebar>
				{/* TODO: Tale Component */}
				{
					pageData.taleCollection.map((tale) => (
						<section>
							<Heading>{tale.title}</Heading>
							{/* TODO: MultiContentBlockComponent */}
							{tale.multiContentBlocks.map((multiContentBlock) => (
								<>
									{isContent(multiContentBlock) ? (
										<ContentBlock value={multiContentBlock.content} />
									) : isButton(multiContentBlock) ? (
										<Button
											href={multiContentBlock.href}
											icon={multiContentBlock.icon}
											variant={multiContentBlock.variant}
										>
											{multiContentBlock.label}
										</Button>
									) : isPicture(multiContentBlock) ? (
										<Picture {...multiContentBlock} />
									) : isVideo(multiContentBlock) ? (
										<mark>TODO-video</mark>
									) : null}
								</>
							))}
						</section>
					))
				}

				<Stack slot="aside">
					<p>
						<mark>Verder praten?</mark>
					</p>
					<CardPrivacy />
				</Stack>
			</Sidebar>
		</Retain>
	</Layer>
</Layout>

<style lang="scss">
	@use '@design-system-styles/tools/_list.scss';
	.c-hero__content {
		@include list.steps;

		ol {
			--list-steps-icon-background: var(--color-donkerblauw);
		}
	}

	.c-hero__wrap-buttons {
		display: flex;
		flex-flow: row wrap;
		gap: var(--space-r-small);
	}
</style>
