---
import { getLocaleFromURL, useGlobalData } from '@mvoc/ui/helpers';
import type { HTMLAttributes } from 'astro/types';
import { v4 as uuidv4 } from 'uuid';
import { Card, Stack } from '@mvoc/ui/components';
import { Button, Control, Heading } from '@mvoc/ui/elements';

interface Props extends HTMLAttributes<'section'> {
	url: string;
	isExternal: boolean;
	name: string;
}

const { class: className, url, isExternal, name, ...attrs } = Astro.props;
const locale = getLocaleFromURL(Astro.url.pathname);
const formId = `form-${uuidv4()}`;
const globalData = useGlobalData({ locale });
---

<section
	class={`c-feedback${className ? ` | ${className}` : ''}`}
	{...attrs}
	data-module="feedback"
	data-name={name}
	id="feedback"
	pagefind-ignore="all"
>
	<Stack>
		<Heading>{globalData.feedback.title}</Heading>
		{globalData.feedback.content ? <p>{globalData.feedback.content}</p> : null}
		<form class="c-feedback__form" action="" data-module-bind="feedback__form">
			<fieldset>
				<legend class="u-visually-hidden">
					{globalData.feedback.title}
				</legend>
				<div class="c-feedback__wrap-controls">
					<Control
						type="radio"
						value="Like"
						name="feedback-choice"
						id={`feedback-choice-yes-${formId}`}
						required
					>
						{globalData.feedback.like}
					</Control>
					<Control
						type="radio"
						value="Dislike"
						name="feedback-choice"
						id={`feedback-choice-no-${formId}`}
					>
						{globalData.feedback.dislike}
					</Control>
				</div>
			</fieldset>

			<div role="status">
				<Card
					class="c-feedback__message"
					variant="filled"
					data-module-bind="feedback__message"
				>
					<Stack>
						<p>{globalData.feedback.thanks}</p>
						<Button
							href={url}
							data-module-bind="feedback__button"
							isExternal={isExternal}
						>
							{globalData.feedback.button}
						</Button>
					</Stack>
				</Card>
			</div>
		</form>
	</Stack>
</section>

<style lang="scss">
	.c-feedback {
	}

	.c-feedback__wrap-controls {
		display: flex;
		gap: var(--space-6);
	}

	.c-feedback__message {
		margin-block-start: var(--space-6);
		display: none;

		.c-feedback__form:valid & {
			display: block;
		}
	}
</style>

<script>
	const parent = document.querySelector(
		'[data-module="feedback"]',
	) as HTMLElement;

	if (parent) {
		const form = parent.querySelector(
			'[data-module-bind="feedback__form"]',
		) as HTMLFormElement;
		const buttonElement = parent.querySelector(
			'[data-module-bind="feedback__button"]',
		) as HTMLAnchorElement;

		form.addEventListener('submit', (event) => {
			event.preventDefault;
		});

		form.addEventListener('change', () => {
			const formData = new FormData(form);
			const choice = formData.get('feedback-choice');
			if (choice) {
				// update feedback button with feedback url parameter containing our choice
				const urlPart = `&feedback=${choice.toString().toLowerCase()}`;
				const buttonHref = buttonElement.href;
				buttonElement.href = buttonHref.includes('&feedback=')
					? buttonHref
							.replace('&feedback=like', urlPart)
							.replace('&feedback=dislike', urlPart)
					: `${buttonHref}${urlPart}`;
			}
		});
	}
</script>
