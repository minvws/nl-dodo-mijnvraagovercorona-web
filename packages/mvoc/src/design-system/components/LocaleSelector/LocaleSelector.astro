---
import { Icon } from '@design-system/elements/Icon';
import { Link } from '@design-system/elements/Link';
import { SiteSettingsProps, useSiteSettings } from 'src/utilities/api/queries';
import {
	availableLocales,
	getLocaleFromURL,
	Locale,
} from 'src/utilities/locale/translation';
import { AlternativeTranslationsProps } from './types';

interface Props {
	alternativeTranslations?: AlternativeTranslationsProps[];
	compact?: boolean;
}

const { alternativeTranslations, compact } = Astro.props;
const currentLocale = getLocaleFromURL(Astro.url.pathname) as Locale;
const siteSettings: SiteSettingsProps = await useSiteSettings({
	locale: currentLocale,
});

// Order alternativeTranslations based on our own order in availableLocales
const translationsOrder = alternativeTranslations
	? alternativeTranslations
			.slice()
			.sort(
				(a, b) =>
					availableLocales.indexOf(a.locale) -
					availableLocales.indexOf(b.locale),
			)
	: [];
---

{
	translationsOrder.length ? (
		<div
			class={`c-locale-selector${compact ? ' c-locale-selector--compact' : ''}`}
			data-module="locale-selector"
		>
			<button
				type="button"
				class="c-locale-selector__toggle"
				id="locale-selector-toggle"
				aria-controls="locale-selector-panel"
				aria-expanded="false"
				data-module-bind="locale-selector__toggle"
			>
				<span class="u-visually-hidden">
					{siteSettings.localeSelector.title}
				</span>
				<span class="u-visually-hidden">
					{siteSettings.localeSelector.current}:
				</span>
				<span class="c-locale-selector__short-name" aria-hidden="true">
					{currentLocale.shortName.toUpperCase()}
				</span>
				<span class="c-locale-selector__full-name">
					{currentLocale.fullName}
				</span>
				<Icon name="world" class="c-locale-selector__icon" />
			</button>
			<div
				class="c-locale-selector__panel"
				id="locale-selector-panel"
				aria-labelledby="locale-selector-toggle"
				data-module-bind="locale-selector__panel"
			>
				<ul role="list" data-module-bind="locale-selector__panel-inner">
					{translationsOrder &&
					translationsOrder.filter(
						(alternativeTranslation) =>
							alternativeTranslation.locale.id !== currentLocale.id,
					).length
						? translationsOrder
								.filter(
									(alternativeTranslation) =>
										alternativeTranslation.locale.id !== currentLocale.id,
								)
								.map((alternativeTranslation) => (
									<li>
										<Link
											href={`${alternativeTranslation.locale.urlPrefix}${
												alternativeTranslation.href
													? `/${alternativeTranslation.href}`
													: ''
											}`}
											class="c-locale-selector__link"
										>
											{alternativeTranslation.locale.fullName}
										</Link>
									</li>
								))
						: null}
				</ul>
			</div>
		</div>
	) : null
}

<script>
	// Cache HTML elements
	const parent = document.querySelector(
		'[data-module="locale-selector"]',
	) as HTMLElement;

	if (parent) {
		const toggle = parent.querySelector(
			'[data-module-bind="locale-selector__toggle"]',
		) as HTMLElement;
		const panel = parent.querySelector(
			'[data-module-bind="locale-selector__panel"]',
		) as HTMLElement;
		const panelInner = parent.querySelector(
			'[data-module-bind="locale-selector__panel-inner"]',
		) as HTMLElement;

		const getPanelDimensions = () => {
			const rect = panelInner.getBoundingClientRect();
			return { blockSize: rect.height, inlineSize: rect.width };
		};

		const open = () => {
			const dimensions = getPanelDimensions();
			panel.style.blockSize = `${dimensions.blockSize}px`;
			parent.classList.add('is-active');
			toggle.setAttribute('aria-expanded', 'true');
		};

		const close = (focus = true) => {
			parent.classList.remove('is-active');
			panel.style.blockSize = '0';
			if (focus) toggle.focus();
			toggle.removeAttribute('aria-expanded');
		};

		const togglePanel = () =>
			parent.classList.contains('is-active') ? close() : open();

		toggle.addEventListener('click', togglePanel);

		// Handle outside click
		document.body.addEventListener('click', (event) => {
			if (
				!(event.target as HTMLElement).closest(
					'[data-module="locale-selector"]',
				)
			) {
				close(false);
			}
		});
	}
</script>

<style lang="scss">
	@use '@design-system-styles/primitives/_responsive.scss';
	@use '@design-system-styles/tools/_a11y.scss';

	.c-locale-selector {
		--c-locale-selector-border-size: 0px;
		--c-locale-selector-border-color: var(--color-poolblauw);
		--c-locale-selector-background-color: var(--color-white);
		--c-locale-selector-border-elevation-size: 3px;
		--c-locale-selector-duration: 0.2s;
		--c-locale-selector-inset-block: var(--space-4);
		position: absolute;
		inset-block-start: calc(
			var(--c-locale-selector-inset-block) + (var(--masthead-logo-spacer) / 2)
		);
		margin-inline-start: auto;
		padding-block: calc(var(--space-3) - 1px);
		padding-inline: calc(var(--space-4) - 1px);
		border-radius: var(--radii-milli);
		background-color: var(--c-locale-selector-background-color);
		transition-property: background-color, color, border;
		transition-duration: 300ms;
		transition-timing-function: ease-in-out;

		z-index: 1;

		border: var(--c-locale-selector-border-size) solid
			var(--c-locale-selector-border-color);
		border-block-end-width: var(--c-locale-selector-border-elevation-size);

		&:lang(ar),
		&:lang(tr),
		&:lang(pl) {
			inset-inline-end: var(--nav-main-inset, var(--space-4));
		}

		&:focus-within {
			@include a11y.focusring;
		}

		&:hover {
			--c-locale-selector-border-color: var(--color-donkerblauw);
		}

		@media --mq-huge {
			--c-locale-selector-inset-block: var(--space-6);
			inset-inline-end: var(--masthead-inline-padding);
		}
	}

	.c-locale-selector__toggle {
		width: 100%;
		display: flex;
		align-items: center;
		justify-content: flex-end;
		outline: none;
		color: var(--color-diepblauw);
		font-weight: bold;
		cursor: pointer;
	}

	.c-locale-selector__full-name {
		:where(.c-locale-selector:not(.is-active)) & {
			@media --mq-huge-until {
				@include a11y.visually-hidden;
			}
		}
		:where(.c-locale-selector.c-locale-selector--compact:not(.is-active)) & {
			@include a11y.visually-hidden;
		}
	}

	.c-locale-selector__short-name {
		:where(.c-locale-selector.is-active) & {
			display: none;
		}

		:where(.c-locale-selector:not(.c-locale-selector--compact)) & {
			@media --mq-huge {
				display: none;
			}
		}
	}

	.c-locale-selector__icon {
		margin-inline-start: var(--space-2);
	}

	.c-locale-selector__link {
		outline: none;

		&:global(> span) {
			text-decoration: none;
		}

		&:focus,
		&:hover {
			outline: none;
			&:global(> span) {
				text-decoration: underline;
			}
		}
	}

	.c-locale-selector__panel {
		visibility: hidden;
		overflow: hidden;
		block-size: 0;
		inline-size: 0;
		transition: block-size var(--c-locale-selector-duration) ease-in-out,
			visibility 0s var(--c-locale-selector-duration);
	}

	.c-locale-selector.is-active {
		.c-locale-selector__panel {
			visibility: visible;
			block-size: auto;
			inline-size: auto;
			transition: block-size var(--c-locale-selector-duration) ease-in-out,
				visibility 0s 0s;
		}
	}
</style>
