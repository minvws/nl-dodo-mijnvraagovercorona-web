---
import { HTMLAttributes } from 'astro/types';
import { Layer } from '../Layout/Layer';
import { GridFluid } from '../Layout/Grid';
import { Retain } from '../Layout/Retain';
import { Stack } from '../Layout/Stack';
import { Heading } from '@design-system/elements/Heading';

interface Props extends HTMLAttributes<'div'> {
	label: string;
}

const { label } = Astro.props;
---

<Layer>
	<Retain>
		<Stack>
			<Heading level={3} id="tabs-title">Tabblad component</Heading>
			<div class="tabs-container">
				<ul aria-labelledby="tabs-title">
					<li><a id="tab-1" href="#tabblad1"> tabblad 1</a></li>
					<li><a id="tab-2" href="#tabblad2"> tabblad 2</a></li>
					<li><a id="tab-3" href="#tabblad3"> tabblad 3</a></li>
					<li><a id="tab-4" href="#tabblad4"> tabblad 4</a></li>
					<li><a id="tab-5" href="#tabblad5"> tabblad 5</a></li>
					<li><a id="tab-6" href="#tabblad6"> tabblad 6</a></li>
				</ul>

				<div class="tabs__panels flow">
					<div id="tabblad1" aria-labelledby="tab-1">
						<p>
							Een vaccin zorgt ervoor dat je lichaam zich beter beschermt tegen
							een virus. Dan is de kans kleiner dat je ziek wordt. Je lichaam
							maakt eerst antistoffen tegen een virus nadat je een vaccinatie
							hebt gekregen. Komt een virus later in je lichaam, dan ruimen de
							antistoffen het virus op. Een vaccin tegen corona maakt je afweer
							tegen het coronavirus dus beter.
						</p>
					</div>
					<div id="tabblad2" aria-labelledby="tab-2">
						<p>
							Coronavaccins worden op verschillende manieren gemaakt. Sommige
							coronavaccins gebruiken een stukje van het virus. Andere
							coronavaccins gebruiken het hele virus. Maar dat is dan dood of
							zwak. Nog andere vaccins gebruiken deeltjes die deskundigen hebben
							nagemaakt van het coronavirus. Dat noemen we een mRNA-vaccin.
						</p>
					</div>
					<div id="tabblad3" aria-labelledby="tab-3">
						<p>
							This can help to establish the company as a thought leader in its
							industry and build trust with customers.
						</p>
					</div>
					<div id="tabblad4" aria-labelledby="tab-4">
						<p>
							Targeted to specific audiences to increase their effectiveness.
						</p>
					</div>
					<div id="tabblad5" aria-labelledby="tab-5">
						<p>Aasd sasdsa sadas dsadas</p>
					</div>
					<div id="tabblad6" aria-labelledby="tab-6">
						<p>asdasdas</p>
					</div>
				</div>
			</div>
		</Stack>
	</Retain>
</Layer>

<script>
	const tabsContainer = document.querySelector('.tabs-container');
	const tabsList = tabsContainer.querySelector('ul');
	const tabButtons = tabsList.querySelectorAll('a');
	const tabPanels = tabsContainer.querySelectorAll('.tabs__panels > div');

	tabsList.setAttribute('role', 'tablist');

	tabsList.querySelectorAll('li').forEach((listitem) => {
		listitem.setAttribute('role', 'presentation');
	});

	tabButtons.forEach((tab, index) => {
		tab.setAttribute('role', 'tab');
		if (index === 0) {
			tab.setAttribute('aria-selected', 'true');
		} else {
			tab.setAttribute('tabindex', '-1');
			tabPanels[index].setAttribute('hidden', '');
		}
	});

	tabPanels.forEach((panel) => {
		panel.setAttribute('role', 'tabpanel');
		panel.setAttribute('tabindex', '0');
	});

	tabsContainer.addEventListener('click', (e) => {
		const clickedTab = (e.target as HTMLElement).closest('a');
		if (!clickedTab) return;
		e.preventDefault();

		switchTab(clickedTab);
	});

	tabsContainer.addEventListener('keydown', (e) => {
		switch ((e as KeyboardEvent).key) {
			case 'ArrowLeft':
				moveLeft();
				break;
			case 'ArrowRight':
				moveRight();
				break;
			case 'Home':
				e.preventDefault();
				switchTab(tabButtons[0]);
				break;
			case 'End':
				e.preventDefault();
				switchTab(tabButtons[tabButtons.length - 1]);
				break;
		}
	});

	function moveLeft() {
		const currentTab = document.activeElement;
		if (!currentTab.parentElement.previousElementSibling) {
			switchTab(tabButtons[tabButtons.length - 1]);
		} else {
			switchTab(
				currentTab.parentElement.previousElementSibling.querySelector('a'),
			);
		}
	}

	function moveRight() {
		const currentTab = document.activeElement;
		if (!currentTab.parentElement.nextElementSibling) {
			switchTab(tabButtons[0]);
		} else {
			switchTab(currentTab.parentElement.nextElementSibling.querySelector('a'));
		}
	}

	function switchTab(newTab) {
		const activePanelId = newTab.getAttribute('href');
		const activePanel = tabsContainer.querySelector(activePanelId);

		tabButtons.forEach((button) => {
			button.setAttribute('aria-selected', `${false}`);
			button.setAttribute('tabindex', '-1');
		});

		tabPanels.forEach((panel) => {
			panel.setAttribute('hidden', `${true}`);
		});

		activePanel.removeAttribute('hidden', false);
		newTab.setAttribute('aria-selected', true);
		newTab.setAttribute('tabindex', '0');
		newTab.focus();
	}
</script>

<style lang="scss">
	@use '@design-system-styles/primitives/_responsive.scss';

	[role='tablist'] {
		list-style: none;
		margin: 0;
		padding: 0;
		display: flex;
		gap: 1rem;
	}

	[aria-selected='true'] {
		text-decoration-thickness: 0.25em;
		text-underline-offset: 0.5em;
		color: orangered;
	}

	.tabs-container {
		padding: 2.5rem;
		border-radius: 0.5rem;
		background: hsl(0 0% 50% / 0.1);
	}

	.site-title {
		font-size: var(--fs-900);
		line-height: 1.05;
		text-transform: uppercase;
	}

	.section-title {
		font-size: var(--fs-800);
		line-height: 1.1;
	}

	.visually-hidden {
		clip: rect(0 0 0 0);
		clip-path: inset(50%);
		height: 1px;
		overflow: hidden;
		position: absolute;
		white-space: nowrap;
		width: 1px;
	}
</style>
