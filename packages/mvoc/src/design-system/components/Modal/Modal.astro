---
import { Heading } from '@design-system/elements/Heading';
import { Stack } from '@design-system/components/Layout/Stack';
import { CloseButton } from '@design-system/elements/CloseButton';

export interface Props {
	id: string;
	title: string;
	variant?: 'default' | 'full';
}

const { id, title, variant = 'default' } = Astro.props;
---

<template data-module-bind="modal-root">
	<div
		class={`modal modal--${variant}`}
		role="dialog"
		aria-labelledby={id}
		data-module="modal"
	>
		<div class="modal__inner" data-module-bind="modal__inner">
			<div class="modal__content" data-module-bind="modal__content">
				<Stack>
					<Heading class="modal__title" level={3} styledAs={2} tabindex="-1">
						{title}
					</Heading>
					<div class="modal__slot">
						<slot>Modal description.</slot>
					</div>
				</Stack>
			</div>
			<CloseButton
				class="modal__close-button"
				data-module-bind="modal__close-button"
			/>
		</div>
	</div>
</template>

<script>
	import { trapFocus } from 'src/utilities/helpers/a11y';

	// Functions

	// Clone templates to the body element and then remove the template
	const transferModalToRoot = (element: HTMLTemplateElement) => {
		const clone = element.content.cloneNode(true);
		document.body.appendChild(clone);
		element.remove();
	};

	// Open our modal, duh!
	const openModal = (modal: HTMLElement, modalTrigger: HTMLElement) => {
		const modalTitle = modal.querySelector('h3');
		const firstInput = modal.querySelector('input') as HTMLInputElement;
		modal.classList.add('is-visible');
		document.body.classList.add('modal-is-visible');
		firstInput ? firstInput.focus() : modalTitle.focus();
		document.addEventListener('keydown', trapFocus.bind(null, modal), false);
		modal.addEventListener('keydown', (event) => {
			if (event.key === 'Escape') {
				closeModal(modal, modalTrigger);
			}
		});
	};

	// Close our modal obviously
	const closeModal = (modal: HTMLElement, modalTrigger?: HTMLElement) => {
		modal.classList.remove('is-visible');
		document.body.classList.remove('modal-is-visible');
		if (modalTrigger) {
			modalTrigger.focus({ preventScroll: true });
		}
		document.removeEventListener('keydown', trapFocus.bind(null, modal));
	};

	// execution
	const modalTemplates = [
		...document.querySelectorAll<HTMLTemplateElement>(
			'[data-module-bind="modal-root"]',
		),
	];

	modalTemplates.forEach((modalTemplate: HTMLTemplateElement) => {
		transferModalToRoot(modalTemplate);
	});

	const modals = [
		...document.querySelectorAll<HTMLElement>('[data-module="modal"]'),
	];

	modals.forEach((modal) => {
		const modalID = modal.getAttribute('aria-labelledby');
		const modalCloseButton = modal.querySelector(
			'[data-module-bind="modal__close-button"]',
		);
		const modalInner = modal.querySelector<HTMLDivElement>(
			'[data-module-bind="modal__inner"]',
		);
		const modalTrigger = document.querySelector(`#${modalID}`) as HTMLElement;

		// event listeners
		modalTrigger.addEventListener('click', () =>
			openModal(modal, modalTrigger),
		);

		modalCloseButton.addEventListener('click', () =>
			closeModal(modal, modalTrigger),
		);

		modal.addEventListener('click', (event) => {
			const target = event.target as HTMLElement;
			if (!target.closest('[data-module-bind="modal__inner"]')) {
				closeModal(modal, modalTrigger);
			}
		});

		modalInner.addEventListener('click', (e) => {
			e.stopPropagation();
		});

		window.addEventListener('hashchange', (event) => {
			closeModal(modal);
		});
	});
</script>

<style lang="scss" is:global>
	@use '@mvoc/ui/styles/primitives/responsive';
	@use '@mvoc/ui/styles/tools/rem';

	body.modal-is-visible > *:not(.modal) {
		filter: blur(6px);
	}

	.modal {
		--modal-space: var(--space-6);
		position: fixed;
		z-index: -100;
		block-size: 0;
		visibility: hidden;

		&.is-visible {
			inset: 0;
			z-index: 100;
			display: grid;
			place-items: center;
			block-size: auto;
			background-color: rgba(0, 0, 0, 0.5);
			visibility: visible;

			.modal__inner {
				opacity: 1;
			}
		}
	}

	.modal__inner {
		--modal__inner-max-inline-size: 55ch;
		--modal__inner-block-size: 100vh;
		--modal__inner-margin: var(--space-6);
		--modal__inner-border-radius: var(--radii-base);
		position: relative;
		display: flex;
		flex-direction: column;
		inline-size: clamp(35ch, 70%, var(--modal__inner-max-inline-size));
		max-inline-size: calc(
			var(--modal__inner-max-inline-size) - var(--modal__inner-margin) * 2
		);
		max-block-size: calc(
			var(--modal__inner-block-size) - var(--modal__inner-margin) * 2
		);
		padding-block-start: var(--modal-space);
		padding-block-end: var(--modal-space);
		border-radius: var(--modal__inner-border-radius);
		background-color: white;
		opacity: 0;
		transition: opacity 0.3s ease-in-out;

		@supports (height: 100dvh) {
			& {
				--modal__inner-block-size: 100dvh;
			}
		}
	}

	.modal__content {
		padding-inline-start: var(--modal-space);
		padding-inline-end: var(--modal-space);
		max-inline-size: 100%;
		overflow: auto;
	}

	.modal__title {
		margin-inline-end: calc(
			var(--font-lineheight-root) * 1rem + var(--space-1) * 2 + var(--space-3)
		);
	}

	.modal__close-button {
		position: absolute;
		inset-inline-end: var(--modal-space);
		inset-block-start: var(--modal-space);
	}

	// Variants
	.modal--full {
		&.is-visible {
			place-items: start center;
		}

		.modal__inner {
			--modal__inner-border-radius: 0;
			--modal__inner-max-inline-size: #{rem.convert(696px)};
			--modal__inner-margin: var(--space-8);
			inline-size: 100%;
			margin-block-start: var(--modal__inner-margin);
			block-size: var(--modal__inner-block-size);
			background-color: var(--color-poolblauw);

			@media (--mq-medium-until) {
				--modal__inner-margin: 0px;
			}

			@media (--mq-medium) {
				--modal__inner-border-radius: var(--radii-milli);
				block-size: auto;
			}
		}
	}
</style>
