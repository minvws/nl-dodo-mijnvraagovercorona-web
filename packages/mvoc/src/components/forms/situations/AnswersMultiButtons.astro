---
import Submit from './Submit.astro';
import { Stack } from '@design-system/components/Layout/Stack';
import {
	Disclosure,
	DisclosureItem,
} from '@design-system/components/Disclosure';
import { getDaysToGenerate } from 'src/utilities/helpers/advice-helpers';
import { type QuestionPageProps } from 'src/utilities/api';
import { DuoColumnContent } from '@design-system/components/DuoColumnContent';
import { ContentBlock } from '@design-system/components/ContentBlock';
import { parseLink } from 'src/utilities/helpers/link';
import { getFullPageUrl } from 'src/utilities/helpers/page-subfolder';
import { getLocaleFromURL } from 'src/utilities/locale/translation';
import { Heading } from '@mvoc/ui/elements';
import { Button } from '@mvoc/ui/elements';

export interface Props {
	answers: QuestionPageProps['question']['multi'];
	buttons: QuestionPageProps['buttons'];
	showMore: QuestionPageProps['question']['showMore'];
	content?: QuestionPageProps['content'];
	label?: string;
	type?: 'checkbox' | 'radio';
	hideLabel?: boolean;
}

const {
	answers,
	buttons,
	showMore,
	content,
	label,
	type,
	hideLabel = true,
} = Astro.props;
const locale = getLocaleFromURL(Astro.url.pathname);

const split = showMore?.max || 6;

// Split items into 2 groups
const firstGroup = answers.slice(0, split ? split : answers.length);
const secondGroup = answers.slice(
	split ? split : answers.length,
	answers.length,
);

let daysToGenerate = [] as number[];

const parsedButtons = buttons?.map((button, index) => {
	if (index === 0 && button.standard) {
		daysToGenerate = getDaysToGenerate(button.next);
	}
	return index === 0 && button.standard
		? { ...button, disabled: true }
		: {
				...button,
		  };
});
---

<Stack
	data-module={'answers-button'}
	data-max-days={daysToGenerate.length}
	data-type={type}
>
	{content ? <DuoColumnContent content={content} /> : null}
	<div>
		<Stack gap={4}>
			{
				label ? (
					<Heading class={hideLabel ? 'u-visually-hidden' : undefined}>
						{label}
					</Heading>
				) : null
			}
			<slot name="after-label" />
			<Stack gap={4}>
				{
					firstGroup.map(({ content, next }) => (
						<Button
							variant="tertiary"
							href={parseLink(getFullPageUrl(next), locale)}
							icon="chevron-small-right"
							interactionIconAnimation="swing"
							full
						>
							<ContentBlock value={content} />
						</Button>
					))
				}
			</Stack>
			{
				secondGroup.length ? (
					<Disclosure>
						<DisclosureItem
							label={showMore.label.this}
							labelActive={showMore.label.that}
							headingStyledAs={5}
						>
							<Stack gap={4}>
								{secondGroup.map(({ content, next }) => (
									<Button
										variant="tertiary"
										href={parseLink(getFullPageUrl(next), locale)}
										icon="chevron-small-right"
										interactionIconAnimation="swing"
										full
									>
										<ContentBlock value={content} />
									</Button>
								))}
							</Stack>
						</DisclosureItem>
					</Disclosure>
				) : null
			}
		</Stack>
	</div>

	<Submit buttons={parsedButtons} />
</Stack>
