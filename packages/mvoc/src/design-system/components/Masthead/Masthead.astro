---
import { Sprite } from 'astro-icon';
import { NavigationMain } from '../Navigation';
import { getLocaleFromURL } from 'src/utilities/locale/translation';
import { SiteSettingsProps, useSiteSettings } from 'src/utilities/api/queries';
import { Icon } from '@design-system/elements/Icon';

type Props = {
	highlight?: boolean;
	logoUrl: string;
	logoAlt: string;
	forceCompact?: boolean;
};

const { highlight, logoUrl, logoAlt, forceCompact } = Astro.props;
const locale = getLocaleFromURL(Astro.url.pathname);
const siteSettings: SiteSettingsProps = await useSiteSettings({
	locale,
});
---

<header
	class={`c-masthead${highlight ? ` c-masthead--highlight` : ''}${
		forceCompact ? ` c-masthead--compact` : ''
	}`}
	role="banner"
	data-module="masthead"
>
	<div class="c-masthead__top" data-module-bind="masthead__top">
		<div>
			<slot name="start" />
		</div>
		<a class="c-masthead__logo" href={logoUrl}>
			<Sprite class="c-masthead__logo-visual" name="ro-logo" optimize={true} />
			<span class="u-visually-hidden">{logoAlt}</span>
		</a>

		<div class="c-masthead__end">
			{
				siteSettings.masthead?.menu?.menuButtonLabel ? (
					<button
						class="c-masthead__button"
						type="button"
						aria-expanded="false"
						aria-label={siteSettings.masthead.menu.menuButtonLabel}
						aria-controls="nav-main"
						data-module-bind="masthead__button"
					>
						<Icon
							name="mobile"
							class="c-masthead__button-icon | hide-expanded"
						/>
						<Icon
							name="cross"
							class="c-masthead__button-icon | show-expanded"
						/>
					</button>
				) : null
			}
		</div>
	</div>
	{locale.id === 'nl' || locale.id === 'en' ? <NavigationMain /> : null}
</header>

<style lang="scss">
	@use '@design-system-styles/primitives/_responsive.scss';
	@use '@design-system-styles/tools/_a11y.scss';

	.c-masthead {
		--masthead-logo-block-size: 4rem; // 80px
		--masthead-inline-padding: var(--stack-base);
		position: var(--masthead-position, absolute);
		z-index: var(--masthead-z-index, unset);
		display: grid;
		grid-template-areas: var(
			--masthead-template-areas,
			'top top' 'main drawer'
		);
		grid-template-rows: var(--masthead-logo-block-size) 1fr;
		grid-template-columns: 1fr var(--theme-main-menu-open-size);
		inline-size: 100%;
		block-size: var(--masthead-block-size, var(--body-block-size));
		padding-inline: var(--masthead-inline-padding);
		background-color: var(--masthead-background, var(--color-donkerblauw));

		@media --mq-large {
			--masthead-position: relative;
			--masthead-z-index: 50;
			--masthead-block-size: auto;
			--masthead-template-areas: 'top top' 'drawer drawer';
			--masthead-background: var(--color-poolblauw);
			padding: 0;

			& {
				--masthead-logo-block-size: 5.1rem; // 102px
			}
		}
	}

	.c-masthead__top {
		position: relative;
		z-index: 3;
		display: grid;
		grid-area: top;
		grid-template-columns: 1fr auto 1fr;
	}

	.c-masthead__end {
		display: flex;
	}

	.c-masthead__logo {
		block-size: var(--masthead-logo-block-size);

		&:focus {
			outline: var(--elevation-focusring);
			outline-offset: 2px;
		}
	}
	.c-masthead__logo-visual {
		display: block;
		block-size: var(--masthead-logo-block-size);
		aspect-ratio: 54/81;
	}

	/**
	 * Button
	 */
	.c-masthead__button {
		margin-inline-start: auto;
		display: var(--c-masthead__button-display, flex);
		align-items: center;
		justify-content: center;
		inline-size: var(--space-r-menu-button);
		aspect-ratio: 1/1;
		outline: none;
		color: var(--color-diepblauw);
		align-self: center;

		&:focus {
			@include a11y.focusring();
		}

		.show-expanded {
			display: none;
		}

		&[aria-expanded='true'] {
			.hide-expanded {
				display: none;
			}

			.show-expanded {
				display: block;
				color: var(--color-white);
			}
		}

		@media --mq-large {
			display: none;
		}
	}

	.c-masthead__button-icon.c-masthead__button-icon {
		--icon-size: 1em;
	}

	.c-masthead--compact {
		--masthead-logo-block-size: 4rem;
	}
</style>

<script>
	import debounce from 'src/utilities/helpers/debounce';
	import {
		getKeyboardFocusableElements,
		trapFocus,
	} from 'src/utilities/helpers/a11y';
	import { mqLarge } from '@design-system/primitives/responsive';

	// select dom nodes
	const mastheadElement = document.querySelector('[data-module="masthead"]');
	const topElement = mastheadElement.querySelector(
		'[data-module-bind="masthead__top"]',
	);
	const menuButtonElement = mastheadElement.querySelector(
		'[data-module-bind="masthead__button"]',
	);
	const mainElement = document.querySelector('main');
	const navElement = mastheadElement.querySelector('[data-module="nav-main"]');

	// Store masthead spacing in a variable which can be used by other modules
	if (
		topElement &&
		!mastheadElement.classList.contains('c-masthead--compact')
	) {
		const checkSize = () => {
			const mastheadRect = mastheadElement.getBoundingClientRect();
			const mastheadTopRect = topElement.getBoundingClientRect();
			document.documentElement.style.setProperty(
				'--theme__masthead-block-size',
				`${mastheadRect.height}px`,
			);
			document.documentElement.style.setProperty(
				'--theme__masthead-top-block-size',
				`${mastheadTopRect.height}px`,
			);
		};

		window.addEventListener('resize', debounce(checkSize));

		checkSize();
	}

	if (menuButtonElement && mainElement) {
		const trapFocusBind = trapFocus.bind(null, mastheadElement);
		const navElementFocusableElements =
			getKeyboardFocusableElements(navElement);

		const toggleFocusable = () => {
			const isExpanded =
				menuButtonElement.getAttribute('aria-expanded') === 'true';
			navElementFocusableElements.forEach((element) => {
				element.tabIndex = isExpanded
					? null
					: !window.matchMedia(mqLarge).matches
					? -1
					: null;
			});
		};

		const toggleMenu = (event) => {
			event.preventDefault();
			const isExpanded =
				menuButtonElement.getAttribute('aria-expanded') === 'true';

			menuButtonElement.setAttribute(
				'aria-expanded',
				new Boolean(!isExpanded).toString(),
			);
			document.documentElement.classList.toggle('has-open-menu', !isExpanded);

			if (isExpanded) {
				// close menu
				document.removeEventListener('keydown', trapFocusBind, false);
				toggleFocusable();
			} else {
				// open menu
				document.addEventListener('keydown', trapFocusBind, false);
				toggleFocusable();
			}
		};

		menuButtonElement.addEventListener('click', toggleMenu);
		mainElement.addEventListener('click', (event) => {
			const isExpanded =
				menuButtonElement.getAttribute('aria-expanded') === 'true';
			if (isExpanded) {
				toggleMenu(event);
			}
		});

		// By default the navelement element are not focusable
		window.addEventListener('resize', debounce(toggleFocusable));
		toggleFocusable();
	}
</script>
