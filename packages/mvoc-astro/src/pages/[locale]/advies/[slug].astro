---
import { addDays, subDays } from 'date-fns';
import { formatDate } from 'src/utilities/locale/date';
import {
	availableLocales,
	getLocaleFromURL,
} from 'src/utilities/locale/translation';
import {
	getDataSituationAdvice,
	PageSituationAdviceProps,
} from 'src/utilities/api';

import Layout from '@layouts/Layout.astro';
import { ContentBlock } from '@modules/ContentBlock';
import { CardBlock, CardDay, Steps } from '@design-system/components/Card';
import { Stack } from '@design-system/components/Layout/Stack';

export async function getStaticPaths() {
	function getShowOnDays(collection: { showOn: Array<number> }[]) {
		return collection && collection.filter(({ showOn }) => !!showOn).length
			? [...new Set([].concat(...collection.map((answer) => answer.showOn)))]
			: [0];
	}

	return await availableLocales.reduce(async (paths, locale) => {
		const { pages } = await getDataSituationAdvice({ locale });

		// loop over pages
		const newPaths = pages.map((page) => {
			// Get days to generate
			const answerShowOnDays = getShowOnDays(page.answer);
			const planShowOnDays = getShowOnDays(page?.advice.plan);
			// combine answer & plan days
			const daysToGenerate = [
				...new Set(answerShowOnDays.concat(planShowOnDays)),
			];

			return daysToGenerate.map((day) => ({
				params: {
					slug: `${page.slug}${day === 0 ? '' : `-dag-${day}`}`,
					locale: locale.id,
				},
				props: {
					pageData: page,
					pageDay: day,
				},
			}));
		});

		return [...(await paths), newPaths.flat()];
	}, Promise.resolve([]));
}

interface Props {
	pageData: PageSituationAdviceProps;
	pageDay: number;
}

const today = new Date();
const { pageData, pageDay } = Astro.props;
const locale = getLocaleFromURL(Astro.url.pathname);

// Get most relevant answer
const answer = pageData?.answer
	? pageData.answer.filter(
			({ showOn }) => !showOn || showOn.includes(pageDay),
	  )[0] || pageData.answer[pageData.answer.length - 1]
	: null;

// Filter advice plan based on current day
const plan =
	pageData?.advice.plan &&
	pageData.advice.plan
		.filter(({ showOn }) => !showOn || showOn.includes(pageDay))
		.map(({ content, day: planDay, title }) => ({
			content,
			day: planDay,
			title,
			date:
				planDay === null || planDay === undefined
					? formatDate(today, locale.locale)
					: formatDate(
							planDay > pageDay
								? addDays(today, planDay - pageDay)
								: subDays(today, pageDay - planDay),
							locale.locale,
					  ),
		}));
---

<Layout locale={locale} metaData={pageData.metaData}>
	<main>
		<h1>{pageData.header.title}</h1>

		<Stack gap="large">
			{
				answer && (
					<>
						<h2>{answer.title}</h2>
						<ContentBlock value={answer.content} />
					</>
				)
			}

			{
				!!plan?.length && (
					<section>
						<Stack gap="small">
							<h2>{pageData.advice.title}</h2>
							<Steps>
								{plan.map(({ date, title, content }) => {
									return (
										<CardDay title={title} day={date}>
											{content && <ContentBlock value={content} />}
										</CardDay>
									);
								})}
							</Steps>
						</Stack>
					</section>
				)
			}

			{
				!!pageData.advice?.cards?.length && (
					<section>
						<Stack gap="small">
							{pageData.advice.secondaryTitle ? (
								<h2>{pageData.advice.secondaryTitle}</h2>
							) : null}
							<div>
								<Stack gap="large">
									{pageData.advice.cards.map(
										({ title, chapeau, content, buttons }) => (
											<CardBlock
												title={title}
												chapeau={chapeau}
												buttons={buttons}
											>
												<ContentBlock value={content} />
												<mark slot="appendix">Links to Tips</mark>
											</CardBlock>
										),
									)}
								</Stack>
							</div>
						</Stack>
					</section>
				)
			}
		</Stack>
	</main>
</Layout>
