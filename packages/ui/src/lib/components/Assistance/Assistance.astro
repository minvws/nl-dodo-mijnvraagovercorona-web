---
import type { HTMLAttributes } from 'astro/types';
import { Heading, Link, Button, type ButtonProps } from '@dodo/ui/elements';
import { GridFluid, type PictureProps, Stack } from '@dodo/ui/components';
import { getLocaleFromURL, useGlobalData } from '@dodo/ui/helpers';

interface Props extends HTMLAttributes<'div'> {
	inDialog?: boolean;
	title: string;
	image?: PictureProps['image'];
	text: string;
	phone: {
		phoneNumber: string;
		openingHourLabel: string;
		openingHour: number;
		closingHour: number;
		nowOpen: string;
	};
	getHelp?: {
		title: string;
		button: ButtonProps;
	};
	feedback: string;
}

const {
	class: className,
	feedback,
	inDialog,
	title,
	image,
	text,
	phone,
	getHelp,
} = Astro.props;

const locale = getLocaleFromURL(Astro.url.pathname);
const openingHour = phone.openingHour;
const closingHour = phone.closingHour;
const globalData = useGlobalData({ locale });
---

<div
	class={`c-assistance${feedback || getHelp ? ' c-assistance--feedback' : ''}${
		className ? ` | ${className}` : ''
	}`}
	data-module="assistance"
	data-pagefind-ignore="all"
>
	<GridFluid class="c-assistance__grid">
		<div>
			{
				!inDialog ? (
					<div class="c-assistance__img-container">
						<img
							src={image?.src || '/images/questions.svg'}
							alt=""
							loading="lazy"
							class={`c-assistance__img c-assistance__img-contact`}
						/>
					</div>
				) : null
			}
			<Stack>
				<hgroup>
					{!inDialog ? <Heading styledAs={1}>{title}</Heading> : null}

					<Heading class="c-assistance__heading-humble" level={3}>
						<span>
							{text}
						</span>
					</Heading>
				</hgroup>

				<div>
					<Link
						href={`tel:${phone.phoneNumber.replace(/\D/g, '')}`}
						icon="phone"
						iconPosition="leading"
						variant="cta"
					>
						{phone.phoneNumber}
					</Link>

					{
						phone.openingHour && (
							<p>
								{phone.openingHourLabel}
								<br />
								<span
									data-starttime={openingHour}
									data-endtime={closingHour}
									data-module-bind="assistance__openinghours"
									class="c-assistance__show-phone-open | u-color--accent-safarigroen"
								>
									{phone.nowOpen}
								</span>
							</p>
						)
					}
				</div>
			</Stack>
		</div>

		{
			feedback && (locale.id === 'nl' || locale.id === 'en') ? (
				<div>
					<div class="c-assistance__img-feedback-container">
						<img
							src={image?.src || '/images/questions.svg'}
							alt=""
							loading="lazy"
							class={`c-assistance__img c-assistance__img-feedback`}
						/>
					</div>
					<Stack>
						{getHelp ? (
							<Heading class="c-assistance__heading-humble" level={3}>
								{getHelp.title}
							</Heading>
						) : null}
						<Button href={feedback} isExternal>
							{globalData.feedback.button}
						</Button>
					</Stack>
				</div>
			) : (
				<div>
					<div class="c-assistance__img-feedback-container">
						<img
							src={image?.src || '/images/questions.svg'}
							alt=""
							loading="lazy"
							class={`c-assistance__img c-assistance__img-feedback`}
						/>
					</div>
				</div>
			)
		}
	</GridFluid>
</div>

<script>
	const getIsPhonenumberOpen = (parent: HTMLDivElement) => {
		const openingHourElement = parent.querySelector(
			'[data-module-bind="assistance__openinghours"]',
		);
		if (!openingHourElement) return false;
		const dataStarttime = openingHourElement.getAttribute(
			'data-starttime',
		) as string;
		const dataEndtime = openingHourElement.getAttribute(
			'data-endtime',
		) as string;
		if (!dataStarttime && !dataEndtime) return false;

		const openingHour = parseInt(dataStarttime);
		const closingHour = parseInt(dataEndtime);

		const now = new Date();
		const hours = now.getHours();
		const day = now.getDay();

		const isValidHours = hours >= openingHour && hours < closingHour;
		const isValidDay = day > 0 && day < 6;

		return isValidHours && isValidDay;
	};

	const assistanceElements = document.querySelectorAll<HTMLDivElement>(
		'[data-module="assistance"]',
	);
	if (assistanceElements) {
		assistanceElements.forEach((assistanceElement) => {
			assistanceElement.classList.toggle(
				'phone-open',
				getIsPhonenumberOpen(assistanceElement),
			);
		});
	}
</script>

<style lang="scss">
	@use '@dodo/ui/styles/primitives/responsive';
	@use '@dodo/ui/styles/tools/rem';

	:global(:where(html)) {
		--assistance__image-size: #{rem.convert(150px)};
		--assistance__image-pull-up-division: 2;
	}

	.c-assistance {
		--_assistance__image-pull-up: calc(
			(
					var(--layer-padding-block-start) + var(--assistance__image-size) /
						var(--assistance__image-pull-up-division)
				) * -1
		);
	}

	.c-assistance__grid {
		--grid-fluid-min-item-size: var(--space-100);
		--grid-fluid-gap: var(--space-14);
	}

	@media (--mq-large) {
		.c-assistance--feedback {
			.c-assistance__img-container {
				display: none;
			}

			.c-assistance__img-feedback {
				margin: auto;
				inline-size: #{rem.convert(90px)};
			}
		}
	}

	.c-assistance__img-container,
	.c-assistance--feedback .c-assistance__img-feedback-container {
		display: flex;
		inline-size: var(--assistance__image-size);
		aspect-ratio: 1/1;
		border: 1px solid var(--color-poolblauw);
		border-radius: 50%;
		background-color: white;
		margin-block-start: var(--_assistance__image-pull-up);
		margin-block-end: var(--space-6);

		@media (--mq-large-until) {
			margin-inline: auto;
		}
	}

	@media (--mq-large-until) {
		.c-assistance--feedback .c-assistance__img-feedback-container {
			display: none;
		}
	}

	.c-assistance__heading-humble {
		font-weight: normal;
	}

	.c-assistance__img-contact {
		display: block;
		margin: auto;
		inline-size: #{rem.convert(90px)};
	}

	.c-assistance__show-phone-open {
		display: none;
		.phone-open & {
			display: initial;
		}
	}

	.c-assistance__show-phone-open:before {
		content: '';
		display: inline-block;
		inline-size: var(--space-3);
		block-size: var(--space-3);
		margin-inline-end: var(--space-1);
		border-radius: 50%;
		background-color: var(--color-accent-safarigroen);
	}
</style>
