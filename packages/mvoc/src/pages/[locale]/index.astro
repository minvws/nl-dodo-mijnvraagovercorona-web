---
import Layout from '../../layouts/Layout.astro';
import {
	availableLocales,
	Locale,
	prefixUrlWithlocale,
} from 'src/utilities/locale/translation';
import { getDataHome, PageHomeProps } from 'src/utilities/api';
import { Hero } from '@design-system/components/Hero';
import { Layer } from '@design-system/components/Layout/Layer';
import { Retain } from '@design-system/components/Layout/Retain';
import { Stack } from '@design-system/components/Layout/Stack';
import { SectionHeadingGroup } from '@design-system/components/SectionHeadingGroup';
import { ContentBlock } from '@design-system/components/ContentBlock';
import { GridFluid } from '@design-system/components/Layout/Grid';
import { Button } from '@design-system/elements/Button';
import { stringToSlug } from 'src/utilities/stringToSlug';
import { Assistance } from '@design-system/components/Assistance';
import { AdviceBlock } from '@design-system/components/AdviceBlock';
import { TaleList } from '@design-system/components/Tale';
import { getFullPageUrl } from 'src/utilities/helpers/page-subfolder';

export async function getStaticPaths() {
	const collection = await getDataHome();
	return (
		collection
			// filter out unavailable locales
			.filter(
				(page: PageHomeProps) =>
					availableLocales.filter((locale) => locale.id === page.localeID)
						.length,
			)
			.map((page: PageHomeProps) => ({
				params: {
					locale: page.localeID,
				},
				props: {
					pagesData: collection,
					locale: availableLocales.filter(
						(locale) => locale.id === page.localeID,
					)[0],
				},
			}))
	);
}

interface Props {
	locale: Locale;
	pagesData?: PageHomeProps[];
}

const { locale, pagesData } = Astro.props;

// Get pagedata based on locale
const pageData: PageHomeProps = pagesData.filter(
	(page) => page.localeID === locale.id,
)[0];
---

<Layout
	locale={locale}
	metaData={pageData.metaData}
	skipPageSuffix
	mastheadHighlight
	alternativeTranslations={pageData.alternatives}
	type={pageData.type}
>
	<Hero
		title={pageData.hero.title}
		chapeau={pageData.hero.chapeau}
		image={pageData.hero.image}
		updatedAt={pageData.hero.showUpdatedAt ? pageData.updatedAt : undefined}
		highlight
	>
		<ContentBlock value={pageData.hero.content} />
		{
			pageData?.button?.label ? (
				<Button
					iconPosition="trailing"
					variant={pageData.button.variant}
					icon={pageData.button.icon}
					interactionIconAnimation="swing"
					href={
						pageData.button.slugCollection &&
						pageData.button.slugCollection.slug
							? prefixUrlWithlocale(
									getFullPageUrl(pageData.button.slugCollection),
									locale,
							  )
							: `#${stringToSlug(pageData.important.title)}`
					}
				>
					{pageData.button.label}
				</Button>
			) : null
		}
	</Hero>

	<Layer
		pullUpBy="hero"
		background="ijsblauw"
		id={stringToSlug(pageData.currentAdvice.title)}
	>
		<Retain>
			<Stack gap="huge">
				<SectionHeadingGroup title={pageData.currentAdvice.title}>
					<ContentBlock value={pageData.currentAdvice.content} />
				</SectionHeadingGroup>
				<GridFluid class="grid-advice">
					{
						pageData.currentAdvice.adviceYes ? (
							<AdviceBlock
								{...pageData.currentAdvice.adviceYes}
								locale={locale}
							/>
						) : null
					}
					{
						pageData.currentAdvice.adviceNo ? (
							<AdviceBlock
								{...pageData.currentAdvice.adviceNo}
								locale={locale}
							/>
						) : null
					}
				</GridFluid>
			</Stack>
		</Retain>
	</Layer>

	{
		pageData?.important?.title &&
		pageData?.important?.ctaButtonCollection?.filter((item) => item.label)
			.length ? (
			<Layer id={stringToSlug(pageData.important.title)}>
				<Retain>
					<Stack gap="huge">
						<SectionHeadingGroup
							title={pageData.important.title}
							icon={pageData.important.icon}
						>
							<ContentBlock value={pageData.important.content} />
						</SectionHeadingGroup>
						<GridFluid class="grid-important">
							{pageData.important.ctaButtonCollection
								?.filter((item) => item.label)
								.map((item) => (
									<Button
										variant="tertiary"
										href={prefixUrlWithlocale(
											getFullPageUrl(item.slugCollection),
											locale,
										)}
										icon="chevron-small-right"
										interactionIconAnimation="swing"
									>
										<ContentBlock value={item.label} />
									</Button>
								))}
						</GridFluid>
					</Stack>
				</Retain>
			</Layer>
		) : null
	}

	{
		pageData?.taleCollection?.length ? (
			<Layer>
				<Retain>
					<TaleList taleCollection={pageData.taleCollection} />
				</Retain>
			</Layer>
		) : null
	}

	{
		pageData.assistance && (
			<Layer id={stringToSlug(pageData.assistance.headline)}>
				<Retain>
					<Assistance {...pageData.assistance} />
				</Retain>
			</Layer>
		)
	}
</Layout>

<style lang="scss">
	@use '@design-system-styles/primitives/_responsive.scss';

	.grid-important,
	.grid-advice {
		--grid-fluid-min-item-size: 20rem; // 400px
		--grid-fluid-gap: var(--stack-small);
	}

	.grid-advice {
		align-items: start;
	}
</style>
