---
import Layout from '../../layouts/Layout.astro';
import {
	availableLocales,
	Locale,
	prefixUrlWithlocale,
} from 'src/utilities/locale/translation';
import {
	ErrorPageProps,
	getDataErrorPages,
	getDataHome,
	PageHomeProps,
} from 'src/utilities/api';
import { Hero } from '@design-system/components/Hero';
import { Retain } from '@design-system/components/Layout/Retain';
import { ContentBlock } from '@design-system/components/ContentBlock';
import { Layer } from '@design-system/components/Layout/Layer';
import { Stack } from '@design-system/components/Layout/Stack';
import { Button } from '@design-system/elements/Button';
import { stringToSlug } from 'src/utilities/stringToSlug';
import { GridFluid } from '@design-system/components/Layout/Grid';
import { getFullPageUrl } from 'src/utilities/helpers/page-subfolder';
import { Breadcrumbs } from '@design-system/components/Breadrumbs';

export async function getStaticPaths() {
	const collection = await getDataErrorPages();
	return (
		collection
			// filter out unavailable locales
			.filter(
				(page: ErrorPageProps) =>
					availableLocales.filter((locale) => locale.id === page.localeID)
						.length,
			)
			.map((page: ErrorPageProps) => ({
				params: { error: page.slug, locale: page.localeID },
				props: {
					pageData: page,
					locale: availableLocales.filter(
						(locale) => locale.id === page.localeID,
					)[0],
				},
			}))
	);
}

interface Props {
	pageData: ErrorPageProps;
	locale: Locale;
}

const { pageData, locale } = Astro.props;
const homeCollection = await getDataHome();
const homePageData = homeCollection.filter(
	(page: PageHomeProps) => page.localeID === locale.id,
)[0] as PageHomeProps;
---

<Layout
	locale={locale}
	metaData={pageData.metaData}
	alternativeTranslations={pageData.alternatives}
	type={pageData.type}
>
	<Hero
		title={pageData.hero.title}
		chapeau={pageData.hero.chapeau}
		image={pageData.hero.image}
		updatedAt={pageData.hero.showUpdatedAt ? pageData.updatedAt : undefined}
	>
		<Breadcrumbs
			localeId={locale.id}
			breadcrumbs={pageData.breadcrumbs}
			slot="prefix"
		/>
		<ContentBlock value={pageData.hero.content} />
	</Hero>

	{
		homePageData ? (
			<Layer id={stringToSlug(homePageData.important.title)}>
				<Retain>
					<Stack gap="humongous">
						<Button
							iconPosition="leading"
							icon={pageData.button.icon}
							href={prefixUrlWithlocale(`/`, locale)}
						>
							{pageData.button.label}
						</Button>
						<div>
							<Stack gap="small">
								<ContentBlock value={pageData.content} />
								<GridFluid class="grid-important">
									{homePageData.important.ctaButtonCollection
										?.filter((item) => item.label)
										.filter((item) => !item.slugCollection.slug.startsWith('#'))
										.map((item) => (
											<Button
												variant="tertiary"
												href={prefixUrlWithlocale(
													getFullPageUrl(item.slugCollection),
													locale,
												)}
												icon="chevron-small-right"
												interactionIconAnimation="swing"
											>
												<ContentBlock value={item.label} />
											</Button>
										))}
								</GridFluid>
							</Stack>
						</div>
						<p>
							<strong>{pageData.errormessage}</strong>
						</p>
					</Stack>
				</Retain>
			</Layer>
		) : null
	}
</Layout>

<style lang="scss">
	.grid-important {
		--grid-fluid-min-item-size: 20rem; // 400px
		--grid-fluid-gap: var(--stack-small);
	}
</style>
