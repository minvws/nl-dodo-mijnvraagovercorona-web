---
import { FieldInputText } from '@design-system/components/Form/FieldInputText';
import { Stack } from '@design-system/components/Layout/Stack';
import { Control } from '@design-system/elements/Control';
import { Icon } from '@design-system/elements/Icon';
import type { HTMLAttributes } from 'astro/types';
import type { LocationsPageProps } from 'src/utilities/api';
import type { SiteSettingsProps } from 'src/utilities/api/queries';
import { useSiteSettings } from 'src/utilities/api/queries';
import { getLocaleFromURL } from 'src/utilities/locale/translation';

interface Props extends HTMLAttributes<'form'> {
	pageData: LocationsPageProps;
}

const { class: className, pageData, ...attrs } = Astro.props;
const locale = getLocaleFromURL(Astro.url.pathname);
const siteSettings: SiteSettingsProps = await useSiteSettings({
	locale,
});
---

<form
	class={`c-filter${className ? ` | ${className}` : ''}`}
	{...attrs}
	data-module="filter"
>
	<Stack>
		<fieldset class="c-filter__wrap-search">
			<!-- <div
				class="c-filter__geocoder"
				data-placeholder={`${pageData.filter.searchLabel}…`}
				data-module-bind="navigator__geocoder"
			>
			</div> -->
			<FieldInputText
				type="search"
				id="search"
				label={pageData.filter.searchLabel}
				placeholder={`${pageData.filter.searchLabel}…`}
				icon="looking-glass"
				clearable
				hideLabel
			/>

			<button
				class="c-filter__map-toggle"
				type="button"
				data-module-bind="navigator__map-toggle"
			>
				<span hidden data-list>
					<Icon name="list" />
					{siteSettings.genericLabels.list}
				</span>
				<span data-map>
					<Icon name="marker" />
					{siteSettings.genericLabels.map}
				</span>
			</button>
		</fieldset>

		<fieldset data-filter-toggles hidden>
			<Stack gap={2}>
				<div class="c-filter__wrap-controls">
					<legend class="c-filter__legend">{siteSettings.forms.filterOn}</legend
					>
					<div class="c-filter__controls">
						<Control
							type="checkbox"
							name="filter"
							value="status-open"
							id="status-open"
						>
							{pageData.location.openingHours.openNow}
						</Control>
						<Control type="checkbox" name="filter" value="pma" id="pma" hidden>
							{siteSettings.appointmentTypes.pma}
						</Control>
						<Control type="checkbox" name="filter" value="pza" id="pza" hidden>
							{siteSettings.appointmentTypes.pza}
						</Control>
					</div>
				</div>
			</Stack>
		</fieldset>
	</Stack>
</form>

<style lang="scss">
	@use '@design-system-styles/primitives/_responsive.scss';
	@use '@design-system-styles/tools/_a11y.scss';
	@use '@design-system-styles/tools/_input.scss';

	.c-filter {
	}

	.c-filter__wrap-search {
		display: flex;
		gap: var(--space-4);

		:global(.c-field-wrapper) {
			flex: auto;
		}
	}

	.c-filter__geocoder {
		--c-filter__geocoder-padding: var(--space-4);
		--c-filter__geocoder-padding-with-icon: calc(
			var(--c-filter__geocoder-padding) * 2 +
				var(--c-filter__geocoder-icon-size)
		);
		--c-filter__geocoder-center: calc(
			(var(--font-lineheight-root) * 0.5rem) + var(--c-filter__geocoder-padding)
		);
		--c-filter__geocoder-icon-size: var(--space-6);

		inline-size: 100%;

		:global(.mapboxgl-ctrl-geocoder) {
			// unset mapbox styles
			width: unset;
			min-width: unset;
			max-width: unset;
			border-radius: unset;
			box-shadow: unset;
			font: unset;
			background-color: unset;
			transition: unset;
			//! unset mapbox styles

			&::before {
				position: absolute;
				z-index: 1;
				inset-block-start: var(--c-filter__geocoder-center);
				inset-inline-start: var(--c-filter__geocoder-padding);
				inline-size: var(--c-filter__geocoder-icon-size);
				aspect-ratio: 1/1;
				transform: translateY(-50%);
				background-color: var(--color-diepblauw);
				-webkit-mask-image: url('../../icons/looking-glass.svg');
				mask-image: url('../../icons/looking-glass.svg');
				-webkit-mask-size: contain;
				mask-size: contain;
				content: '';
			}

			&:global(:has(.mapboxgl-ctrl-geocoder--button[style='display: block;'])) {
				:global(.mapboxgl-ctrl-geocoder--input) {
					padding-inline-end: var(--c-filter__geocoder-padding-with-icon);
				}
			}
		}

		:global(.mapboxgl-ctrl-geocoder .suggestions) {
			// unset mapbox styles
			box-shadow: unset;
			background-color: unset;
			border-radius: unset;
			left: unset;
			width: unset;
			top: unset;
			font-size: unset;
			//! unset mapbox styles

			inset-block-start: calc(100% + var(--space-2));
			inset-inline-start: 0;
			inline-size: 100%;
			border-radius: var(--radii-nano);
			box-shadow: var(--elevation-frost);
			font-size: var(--font-size-milli);
			line-height: var(--font-lineheight-milli);
			background-color: var(--color-ijsblauw);

			&:global(> li > a) {
				padding-block: var(--space-2);
				padding-inline: var(--space-4);
				color: inherit;
			}

			&:global(> .active > a) {
				color: inherit;
				background-color: var(--color-poolblauw);
			}
		}

		:global(.mapboxgl-ctrl-geocoder--powered-by) {
			display: none !important;
		}

		:global(.mapboxgl-ctrl-geocoder--icon) {
			display: none;
		}

		:global(.mapboxgl-ctrl-geocoder--input) {
			// unset mapbox styles
			font: unset;
			width: unset;
			border: unset;
			background-color: unset;
			margin: unset;
			height: unset;
			color: unset;
			color: unset;
			padding: unset;
			//! unset mapbox styles

			@include input.scaffold();

			padding-inline-start: var(--c-filter__geocoder-padding-with-icon);
		}

		:global(
				.mapboxgl-ctrl-geocoder--pin-right .mapboxgl-ctrl-geocoder--button
			) {
			// unset mapbox styles
			// display: block !important;
			right: unset;
			top: unset;
			//! unset mapbox styles
			inset-block-start: var(--c-filter__geocoder-center);
			inset-inline-end: var(--space-6);
			inline-size: var(--space-6);
			aspect-ratio: 1/1;
			transform: translateY(-50%);
			background-color: currentColor;
			-webkit-mask-image: url('../../icons/cross.svg');
			mask-image: url('../../icons/cross.svg');
			-webkit-mask-size: contain;
			mask-size: contain;

			&:hover {
				background-color: var(--color-donkerblauw);
			}
		}

		:global(.mapboxgl-ctrl-geocoder--icon-loading) {
			display: none !important;
		}
	}

	.c-filter__controls {
		display: flex;
		flex-wrap: wrap;
		gap: var(--space-4);
	}

	.c-filter__legend {
		--legend-font-size: var(--font-size-root);
		--legend-line-height: var(--font-lineheight-root);
	}

	.c-filter__map-toggle {
		color: var(--color-donkerblauw);

		&:focus {
			@include a11y.focusring;
		}

		> span:not([hidden]) {
			display: flex;
			align-items: center;
			gap: var(--space-2);
		}

		@media (--mq-large) {
			display: none;
		}
	}
</style>
