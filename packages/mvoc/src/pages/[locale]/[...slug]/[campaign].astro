---
import Layout from '../../../layouts/Layout.astro';
import type { Locale } from 'src/utilities/locale/translation';
import { availableLocales } from 'src/utilities/locale/translation';
import { Hero } from '@design-system/components/Hero';
import { ContentBlock } from '@design-system/components/ContentBlock';
import { DisclosureQuote, Stack } from '@mvoc/ui/components';
import { Retain } from '@mvoc/ui/components';
import { Layer } from '@mvoc/ui/components';
import { Assistance } from '@design-system/components/Assistance';
import { getPageSubfolder } from 'src/utilities/helpers/page-subfolder';
import { Breadcrumbs } from '@design-system/components/Breadrumbs';
import { SupportBlock } from '@design-system/components/SupportBlock';
import type { CampaignPageProps } from 'src/utilities/api/campaign';
import { getDataCampaignPages } from 'src/utilities/api/campaign';
import { TaleAbstraction } from '@modules/Tale';
import { stringToSlug } from 'src/utilities/stringToSlug';
import { TabsBlock } from '@design-system/components/TabsBlock';
import { useSiteSettings } from 'src/utilities/api/queries';
import { GridFluid } from '@mvoc/ui/components';
import { getFeedbackUrl } from 'src/utilities/tracking/feedback';
import { Feedback } from '@design-system/components/Feedback';
import { CarouselAbstraction } from '@modules/CarouselAbstraction';

export async function getStaticPaths() {
	const collection = await getDataCampaignPages();

	return (
		collection
			// filter out unavailable locales
			.filter(
				(page: CampaignPageProps) =>
					availableLocales.filter((locale) => locale.id === page.localeID)
						.length,
			)
			.map((page: CampaignPageProps) => ({
				params: {
					slug: getPageSubfolder(page),
					locale: page.localeID,
					campaign: page.slug,
				},
				props: {
					pageData: page,
					locale: availableLocales.filter(
						(locale) => locale.id === page.localeID,
					)[0],
				},
			}))
			.flat(Infinity)
	);
}

interface Props {
	pageData: CampaignPageProps;
	locale: Locale;
}

const { pageData, locale } = Astro.props;
const siteSettings = await useSiteSettings({ locale });

/**
 * Split tales into 2 groups
 */
let taleCollection = {
	first: [],
	second: [],
};

if (pageData?.taleCollection?.length) {
	const middleIndex = Math.ceil(pageData.taleCollection.length / 2);
	taleCollection.first.push(...pageData.taleCollection.splice(0, middleIndex));
	taleCollection.second.push(...pageData.taleCollection.splice(-middleIndex));
}
---

<Layout
	locale={locale}
	metaData={pageData.metaData}
	alternativeTranslations={pageData.alternatives}
	mastheadHighlight
	type={pageData.type}
	includeinSearch
>
	<Hero
		title={pageData.hero.title}
		image={pageData.hero.image}
		chapeau={pageData.hero.chapeau}
		updatedAt={pageData.hero.showUpdatedAt ? pageData.updatedAt : undefined}
		highlight
		isPhoto={pageData.hero.isPhoto}
	>
		<Breadcrumbs breadcrumbs={pageData.breadcrumbs} slot="prefix" />
		<Stack class="c-hero__content">
			<ContentBlock value={pageData.hero.content} />
		</Stack>
	</Hero>

	{
		taleCollection.first.length && taleCollection.second.length ? (
			<Layer>
				<Retain variant="base">
					<Stack gap={14}>
						<GridFluid class="campaign-tale-grid">
							<Stack>
								{taleCollection.first.map((tale) => (
									<DisclosureQuote
										headingLevel={2}
										headingStyledAs={3}
										label={tale.title}
										picture={tale.picture}
										quote={tale.quote}
										readMore={tale.readMore}
										readLess={tale.readLess}
										id={stringToSlug(tale.title)}
										itemscope
										itemprop="mainEntity"
										itemtype="https://schema.org/Question"
									>
										<TaleAbstraction
											{...tale}
											isCampaign={true}
											renderTitle={false}
											anchorable={false}
										/>
									</DisclosureQuote>
								))}
							</Stack>
							<Stack>
								{taleCollection.second.map((tale) => (
									<DisclosureQuote
										headingLevel={2}
										headingStyledAs={3}
										label={tale.title}
										picture={tale.picture}
										quote={tale.quote}
										readMore={tale.readMore}
										readLess={tale.readLess}
										id={stringToSlug(tale.title)}
										itemscope
										itemprop="mainEntity"
										itemtype="https://schema.org/Question"
									>
										<TaleAbstraction
											{...tale}
											isCampaign={true}
											renderTitle={false}
											anchorable={false}
										/>
									</DisclosureQuote>
								))}
							</Stack>
						</GridFluid>
					</Stack>
				</Retain>
			</Layer>
		) : null
	}

	{pageData?.tabs && <TabsBlock tabs={pageData.tabs} />}

	{
		pageData?.carousel?.title && !!pageData?.carousel?.carouselItems && (
			<CarouselAbstraction
				title={pageData.carousel.title}
				items={pageData.carousel.carouselItems}
			/>
		)
	}
	{
		pageData?.support?.cards?.label && !!pageData?.support?.cards?.items && (
			<SupportBlock
				label={pageData.support.cards.label}
				cards={pageData.support.cards.items}
			/>
		)
	}

	{
		pageData?.showFeedback ? (
			<Layer>
				<Retain>
					<Stack>
						<Feedback
							name="Campagne"
							url={getFeedbackUrl(siteSettings.feedback.url, {
								source: pageData.type,
								advice: pageData.slug,
							})}
						/>
					</Stack>
				</Retain>
			</Layer>
		) : null
	}

	{
		pageData.assistance && pageData.assistance.type === 'assistance-new' ? (
			<Layer
				id={stringToSlug(pageData.assistance.title)}
				background={'ijsblauw'}
				pushDownBy="assistance-image"
			>
				<Retain>
					<Assistance
						feedback={getFeedbackUrl(siteSettings.feedback.url, {
							source: pageData.type,
							advice: pageData.slug,
						})}
						{...pageData.assistance}
					/>
				</Retain>
			</Layer>
		) : null
	}
</Layout>

<style lang="scss">
	.campaign-tale-grid {
		--grid-fluid-min-item-size: var(--space-100);
		--grid-fluid-gap: var(--space-4);
	}
</style>
