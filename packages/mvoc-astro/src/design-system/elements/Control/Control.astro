---
// Interfaces
type Props = {
	type: 'radio' | 'checkbox';
	name: string;
	value: string;
	id: string;
	checked?: boolean;
	variant?: 'tile';
};

const { type, name, value, id, checked, variant } = Astro.props;
---

<div
	class={`e-control${type ? ` e-control--${type}` : ''}${
		variant ? ` e-control--${variant}` : ''
	}`}
>
	<input
		class="u-visually-hidden"
		id={id}
		type={type}
		name={name}
		value={value}
		checked={checked}
	/>
	<label class="e-control__label" for={id}><slot /></label>
</div>

<style lang="scss">
	.e-control {
		--control-color: var(--color-donkerblauw);
		--control-spacing: var(--space-r-small);
		--control-indicator-size: var(--space-r-base);
		--control-indicator-inline-start: 0px;
		--control-indicator-border-color: currentColor;
		--control-indicator-border-radius: 0px;
	}

	.e-control__label {
		position: relative;
		display: block;
		padding-inline-start: calc(
			var(--control-indicator-inline-start) + var(--control-indicator-size) +
				var(--control-spacing)
		);
		color: var(--control-color);
		cursor: pointer;

		&,
		&::before,
		&::after {
			transition-property: background-color, color, border, box-shadow;
			transition-duration: 300ms;
			transition-timing-function: ease-in-out;
		}

		// indicator
		&::before,
		&::after {
			position: absolute;
			inset-block-start: calc(50% - var(--control-indicator-size) / 2);
			inset-inline-start: var(--control-indicator-inline-start);
			display: block;
			inline-size: var(--control-indicator-size);
			block-size: var(--control-indicator-size);
			border: 1px solid var(--control-indicator-border-color);
			border-radius: var(--control-indicator-border-radius);
			content: '';
		}

		&::before {
			background-color: var(--color-white);
		}

		&::after {
			border-color: transparent;
			background: url("data:image/svg+xml,%3Csvg width='14' height='14' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M13.332.44a1.074 1.074 0 0 0-1.44.146L5.607 7.619 1.827 4.346A1.072 1.072 0 0 0 .204 5.708l4.578 7.64c.193.322.54.52.916.521h.004c.374 0 .722-.195.917-.515l6.99-11.495a1.073 1.073 0 0 0-.277-1.42Z' fill='%23fff'/%3E%3C/svg%3E");
			background-repeat: no-repeat;
			background-position: center;
		}

		input:focus + &,
		input:hover + & {
			&::before {
				outline: var(--elevation-focusring);
			}
		}

		input:checked + &::before {
			background-color: currentColor;
		}
	}

	// Variants
	.e-control--radio {
		--control-indicator-border-radius: 50%;
	}

	.e-control--tile {
		.e-control__label {
			--control-indicator-inline-start: var(--control-spacing);
			--control--tile-border: var(--variant--tile-border);
			--control--tile-elevation: var(--variant--tile-elevation);
			padding-block-start: var(--control-spacing);
			padding-block-end: var(--control-spacing);
			padding-inline-end: var(--control-spacing);
			border: var(--control--tile-border);
			border-radius: var(--variant--tile-border-radius);
			box-shadow: var(--control--tile-elevation);
		}

		input:checked + .e-control__label,
		input:focus + .e-control__label,
		.e-control__label:hover {
			--control--tile-border: var(--variant--tile-border-interactive);
			--control--tile-elevation: var(--variant--tile-elevation-interactive);
		}

		input:hover:not(:focus) + .e-control__label::before {
			outline: none;
		}
	}
</style>
