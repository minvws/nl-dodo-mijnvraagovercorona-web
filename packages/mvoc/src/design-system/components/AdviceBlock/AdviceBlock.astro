---
import { prefixUrlWithlocale, Locale } from 'src/utilities/locale/translation';
import { HTMLAttributes } from 'astro/types';
import { Card } from '@design-system/components/Card';
import { MediaBlock } from '@design-system/components/MediaBlock';
import {
	ContentBlock,
	ContentBlockProps,
} from '@design-system/components/ContentBlock';
import { Stack } from '../Layout/Stack';
import { Button } from '@design-system/elements/Button';
import { ButtonProps } from 'src/utilities/api/queries/buttons';
import { ImageProps } from 'src/utilities/api/queries';
import { getFullPageUrl } from 'src/utilities/helpers/page-subfolder';
import { Disclosure, DisclosureItem } from '../Disclosure';

interface Props extends HTMLAttributes<'div'> {
	title: string;
	image?: ImageProps;
	content: ContentBlockProps['value'];
	button?: ButtonProps;
	locale: Locale;
	items?: {
		image?: ImageProps;
		content: ContentBlockProps['value'];
	}[];
}

const {
	title,
	image,
	content,
	button,
	items,
	locale,
	class: className,
} = Astro.props;
---

<Card variant="filled" class="c-advice-block">
	<Stack gap={4}>
		<Disclosure>
			<DisclosureItem
				headingLevel={3}
				label={title}
				id={title}
				accordeon
				adviceBlock
				itemscope
				itemprop="mainEntity"
				itemtype="https://schema.org/Question"
				image={image}
			>
				<Stack gap={8}>
					<ContentBlock value={content} />
					{
						items.map((item) => (
							<MediaBlock icon={item.image} class="c-advice-block__media-item">
								<ContentBlock value={item.content} />
							</MediaBlock>
						))
					}
					{
						button?.label ? (
							<Button
								variant={button.variant}
								href={prefixUrlWithlocale(
									getFullPageUrl(button.slugCollection),
									locale,
								)}
								icon={button.icon}
								interactionIconAnimation="swing"
							>
								{button.label}
							</Button>
						) : null
					}
				</Stack>
			</DisclosureItem>
		</Disclosure>
	</Stack>
</Card>

<style lang="scss">
	@use '@design-system-styles/primitives/_responsive.scss';

	/**
	 * 1. override specificity by 0,1,0 to battle Astro loading
	 */
	.c-advice-block.c-advice-block {
		--card-border-width: var(--space-1);
		--card-border-color: var(--color-accent-grasgroen);
		border-radius: var(--space-1);
		padding: 0;
		border-radius: var(--space-1);
		border-block-start: 0;
		border-block-end: 0;
		border-inline-end: 0;

		&:nth-of-type(even) {
			--card-border-color: var(--color-accent-robijnrood);
		}
	}

	.c-advice-block__media-heading {
		& {
			@media --mq-large {
				--c-media-block-icon-size: var(--space-14);
			}
		}
	}

	.c-advice-block__media-item {
		@media --mq-large {
			margin-inline-start: var(--space-3);
		}
	}
</style>
<script>
	import { mqLarge } from '@design-system/primitives/responsive';

	const mql = window.matchMedia(mqLarge);

	const disclosureItems = [
		...document.querySelectorAll('[data-module-bind="disclosure__item"]'),
	];

	const disclosureToggles = [
		...document.querySelectorAll('.advice-block__button'),
	];

	const disclosureInnerPanels = [
		...document.querySelectorAll('.disclosure__panel-inner'),
	];

	const setToggleTabIndex = (toggle) => {
		toggle.setAttribute('tabindex', '-1');
	};

	const unsetToggleTabIndex = (toggle) => {
		toggle.removeAttribute('tabindex');
	};

	const toggleDisclosure = (matches) => {
		disclosureInnerPanels.forEach((item) => {
			item.classList.add('disclosure__panel-inner--no-padding');
		});

		if (matches) {
			disclosureToggles.forEach(setToggleTabIndex);
			disclosureItems.forEach((item) => {
				item.classList.add('is-active');
			});
		} else {
			disclosureToggles.forEach(unsetToggleTabIndex);
			disclosureItems.forEach((item) => {
				item.classList.remove('is-active');
			});
		}
	};

	mql.addEventListener('change', (event) => {
		toggleDisclosure(event.matches);
	});

	toggleDisclosure(mql.matches);
</script>
