---
import { ContentBlock } from '@design-system/components/ContentBlock';
import { Picture } from '@design-system/components/Picture';
import { Video } from '@design-system/components/Video';
import { MultiContentBlocksProps } from 'src/utilities/api/queries';
import { Stack } from '../Layout/Stack';

import {
	isContent,
	isPicture,
	isButton,
	isVideo,
} from 'src/utilities/api/queries';
import { FlexibleButton } from '@modules/elements/FlexibleButton';

interface Props {
	multiContentBlocks: MultiContentBlocksProps;
}

const { multiContentBlocks } = Astro.props;
---

<Stack class="c-multi-content-block" gap={4}>
	{
		multiContentBlocks.map((multiContentBlock) => (
			<>
				{isContent(multiContentBlock) ? (
					<Stack class="c-multi-content-block__content" gap={4}>
						<ContentBlock value={multiContentBlock.content} />
					</Stack>
				) : isButton(multiContentBlock) ? (
					<FlexibleButton
						className="c-multi-content-block__button"
						{...multiContentBlock}
					/>
				) : isVideo(multiContentBlock) ? (
					<Video
						title={multiContentBlock.title}
						showInternalVideo={multiContentBlock.showInternalVideo}
						internalVideoUrl={multiContentBlock.internalVideoUrl}
						subtitle={multiContentBlock.subtitle}
						url={multiContentBlock.url}
						picture={multiContentBlock.picture}
					/>
				) : isPicture(multiContentBlock) ? (
					<Picture
						class="c-multi-content-block__picture"
						{...multiContentBlock}
					/>
				) : null}
			</>
		))
	}
</Stack>

<style lang="scss">
	.c-multi-content-block {
	}

	.c-multi-content-block__content {
	}

	.c-multi-content-block__button {
		display: flex;
		inline-size: fit-content;
	}

	.c-multi-content-block__picture {
		:global(img) {
			max-inline-size: 100%;
			margin-inline: auto;
		}
	}
</style>
