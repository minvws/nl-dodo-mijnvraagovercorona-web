---
import type { HTMLAttributes } from 'astro/types';
import { Layer } from '@mvoc/ui/components';
import { Retain } from '@mvoc/ui/components';
import { Stack } from '@mvoc/ui/components';
import { Heading } from '@mvoc/ui/elements';
import { ContentBlock } from '../ContentBlock';
import { stringToSlug } from 'src/utilities/stringToSlug';
import type { TabsProps } from 'src/utilities/api/queries/tabs';
import { Video } from '../Video';
import { Switcher } from '@mvoc/ui/components';
import { Chapeau } from '@mvoc/ui/elements';
import { Link } from '@mvoc/ui/elements';
import { FlexibleButton } from '@modules/elements/FlexibleButton';

interface Props extends HTMLAttributes<'div'> {
	tabs?: TabsProps[];
}

const { tabs } = Astro.props;
---

<Layer background="ijsblauw">
	<Retain>
		<div class="c-tabs-block c-tabs-block__wrap">
			<Stack>
				<ul class="c-tabs-block__link-list" role="list">
					{
						tabs.map((tab, index) => (
							<li class="c-tabs-block__list-item">
								<Link
									href={`#${stringToSlug(tab.title)}`}
									id={`tab-${index + 1}`}
									class="c-tabs-block__link"
								>
									{tab.tabTitle || tab.title}
								</Link>
							</li>
						))
					}
				</ul>
				<div class="c-tabs-block__panels">
					{
						tabs.map((tab, index) => (
							<div
								id={`${stringToSlug(tab.title)}`}
								aria-labelledby={`tab-${index + 1}`}
							>
								<Stack gap={7}>
									<hgroup class="c-tabs-block__hgroup">
										{tab.chapeau ? (
											<Chapeau
												class="c-tabs-block__chapeau"
												role="presentation"
												data-pagefind-ignore
											>
												{tab.chapeau}
											</Chapeau>
										) : null}
										<Heading>{tab.title}</Heading>
									</hgroup>
									<Switcher>
										<Retain variant="text">
											<Stack>
												<ContentBlock value={tab.content} />
											</Stack>
										</Retain>
										<Retain>
											{tab.image ? (
												<img class="" src={tab.image.src} loading="lazy" />
											) : null}

											{tab.video && !tab.image.src ? (
												<Video
													title={tab.video.title}
													showInternalVideo={tab.video.showInternalVideo}
													internalVideoUrl={tab.video.internalVideoUrl}
													subtitle={tab.video.subtitle}
													url={tab.video.url}
													picture={tab.video.picture}
												/>
											) : null}
										</Retain>
									</Switcher>
									{tab.button ? <FlexibleButton {...tab.button} /> : null}
								</Stack>
							</div>
						))
					}
				</div>
			</Stack>
		</div>
	</Retain>
</Layer>
<script>
	import { mqMediumUntil } from '@mvoc/ui/primitives';
	const tabsContainer = document.querySelector('.c-tabs-block__wrap');
	if (tabsContainer) {
		const tabsList = tabsContainer.querySelector('.c-tabs-block__link-list');
		const tabButtons = tabsList.querySelectorAll('a');
		const tabPanels = tabsContainer.querySelectorAll(
			'.c-tabs-block__panels > div',
		);
		let activeVideo = null;
		const mqm = window.matchMedia(mqMediumUntil);

		tabsList.setAttribute('role', 'tablist');
		tabsList.querySelectorAll('li').forEach((listitem) => {
			listitem.setAttribute('role', 'presentation');
		});
		tabButtons.forEach((tab, index) => {
			tab.setAttribute('role', 'tab');
			if (index === 0) {
				tab.setAttribute('aria-selected', 'true');
			} else {
				tab.setAttribute('tabindex', '-1');
				tabPanels[index].setAttribute('hidden', '');
			}
		});
		tabPanels.forEach((panel) => {
			panel.setAttribute('role', 'tabpanel');
			panel.setAttribute('tabindex', '0');
		});
		tabsList.addEventListener('click', (e) => {
			const clickedTab = (e.target as HTMLElement).closest('a');
			if (!clickedTab) return;
			if (!mqm.matches) {
				e.preventDefault();
			}
			switchTab(clickedTab);
		});

		tabsContainer.addEventListener('keydown', (e) => {
			switch ((e as KeyboardEvent).key) {
				case 'ArrowLeft':
					moveLeft();
					break;
				case 'ArrowRight':
					moveRight();
					break;
				case 'Home':
					e.preventDefault();
					switchTab(tabButtons[0]);
					break;
				case 'End':
					e.preventDefault();
					switchTab(tabButtons[tabButtons.length - 1]);
					break;
			}
		});
		function moveLeft() {
			const currentTab = document.activeElement;
			if (!currentTab.parentElement.previousElementSibling) {
				switchTab(tabButtons[tabButtons.length - 1]);
			} else {
				switchTab(
					currentTab.parentElement.previousElementSibling.querySelector('a'),
				);
			}
		}
		function moveRight() {
			const currentTab = document.activeElement;
			if (!currentTab.parentElement.nextElementSibling) {
				switchTab(tabButtons[0]);
			} else {
				switchTab(
					currentTab.parentElement.nextElementSibling.querySelector('a'),
				);
			}
		}
		function switchTab(newTab) {
			const activePanelId = newTab.getAttribute('href');
			const activePanel = tabsContainer.querySelector(activePanelId);
			if (activeVideo) {
				activeVideo.pause();
			}
			tabButtons.forEach((button) => {
				button.setAttribute('aria-selected', `${false}`);
				button.setAttribute('tabindex', '-1');
			});
			tabPanels.forEach((panel) => {
				panel.setAttribute('hidden', `${true}`);
			});
			activePanel.removeAttribute('hidden', false);
			newTab.setAttribute('aria-selected', true);
			newTab.setAttribute('tabindex', '0');
			newTab.focus();
			activeVideo = activePanel.querySelector('video');
		}
	}
</script>
<style lang="scss">
	@use '@mvoc/ui/styles/primitives/responsive';
	@use '@mvoc/ui/styles/tools/rem';

	.c-tabs-block {
		--tablink-color-selected: var(--color-diepblauw);
		--tablink-bg-color: var(--color-ijsblauw);
		--tablink-bg-color-selected: var(--color-poolblauw);
		--tablink-bg-color-selected-mobile: var(--tablink-color-selected);
		--tablink-bg-color-hover: var(--tablink-bg-color-selected);
		--tablink-border-color: var(--tablink-bg-color);
		--tablink-border-color-selected: var(--tablink-color-selected);
	}

	.c-tabs-block__hgroup {
		display: flex;
		flex-direction: column;
		gap: var(--space-4);
	}

	[role='tabpanel'] {
		&:focus-visible {
			outline: var(--elevation-focusring);
			outline-offset: var(--space-3);
		}
	}

	.c-tabs-block__link-list {
		display: flex;
		list-style: none;
		flex-direction: row;
		gap: var(--space-4);
		flex-wrap: wrap;
		padding-inline-start: 0;
	}

	.c-tabs-block__link {
		border: 1px solid var(--tablink-border-color);
		border-radius: var(--radii-nano);
		--link-text-decoration: none;
		display: block;
		padding: rem.convert(14px);
		padding-inline: rem.convert(20px);
		color: var(--tablink-color-selected);
		font-weight: bold;
		&:hover {
			background-color: var(--tablink-bg-color-hover);
		}
		&[aria-selected='true'] {
			border: 1px solid var(--tablink-border-color-selected);
			border-radius: var(--radii-nano);
			background-color: var(--tablink-bg-color-selected);
		}
		@media (--mq-medium-until) {
			&[aria-selected='true'] {
				color: var(--color-white);
				background-color: var(--tablink-bg-color-selected-mobile);
				border: 1px solid var(--tablink-border-color-selected);
			}
			color: var(--color-diepblauw);
			border: 1px solid var(--tablink-border-color-selected);
			&:hover {
				color: var(--tablink-color-selected);
				background-color: var(--tablink-bg-color-hover);
			}
		}
	}
</style>
