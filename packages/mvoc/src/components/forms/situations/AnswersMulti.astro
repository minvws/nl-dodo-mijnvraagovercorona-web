---
import Submit from './Submit.astro';
import { moduleName as AnswersMultiModuleName } from './AnswersMulti';
import { Control } from '@design-system/elements/Control';
import { Stack } from '@design-system/components/Layout/Stack';
import {
	Disclosure,
	DisclosureItem,
} from '@design-system/components/Disclosure';
import { AssistanceProps } from 'src/utilities/api/queries/assistance';
import { getDaysToGenerate } from 'src/utilities/helpers/advice-helpers';
import { QuestionPageProps } from 'src/utilities/api';
import { DuoColumnContent } from '@design-system/components/DuoColumnContent';
import { ContentBlock } from '@design-system/components/ContentBlock';
import { parseLink } from 'src/utilities/helpers/link';
import { getFullPageUrl } from 'src/utilities/helpers/page-subfolder';
import { getLocaleFromURL } from 'src/utilities/locale/translation';
import { Link } from '@design-system/elements/Link';
import { InfoModal, Modal } from '@design-system/components/Modal';
import { Icon } from '@design-system/elements/Icon';

export interface Props {
	answers: QuestionPageProps['question']['multi'];
	buttons: QuestionPageProps['buttons'];
	showMore: QuestionPageProps['question']['showMore'];
	assistance?: AssistanceProps;
	content?: QuestionPageProps['content'];
	label?: string;
	type?: 'checkbox' | 'radio';
	hideLabel?: boolean;
}

const {
	answers,
	buttons,
	showMore,
	assistance,
	content,
	label,
	type,
	hideLabel = true,
} = Astro.props;
const locale = getLocaleFromURL(Astro.url.pathname);

const split = showMore?.max || 6;

// Split items into 2 groups
const firstGroup = answers.slice(0, split ? split : answers.length);
const secondGroup = answers.slice(
	split ? split : answers.length,
	answers.length,
);

let daysToGenerate = [] as number[];

const parsedButtons = buttons?.map((button, index) => {
	if (index === 0 && button.standard) {
		daysToGenerate = getDaysToGenerate(button.next);
	}
	return index === 0 && button.standard
		? { ...button, disabled: true }
		: {
				...button,
		  };
});
---

<form
	method="get"
	data-module={AnswersMultiModuleName}
	data-max-days={daysToGenerate.length}
	data-type={type}
>
	<Stack>
		{content ? <DuoColumnContent content={content} /> : null}
		<fieldset>
			<Stack gap={4}>
				{
					label ? (
						<legend class={hideLabel ? 'u-visually-hidden' : undefined}>
							{label}
						</legend>
					) : null
				}
				<slot name="after-label" />
				<Stack gap={4}>
					{
						firstGroup.map(
							({ content, next, weight, modalReference, _key }) => (
								<Control
									type={type}
									variant="tile"
									name={AnswersMultiModuleName}
									id={_key}
									value={next ? parseLink(getFullPageUrl(next), locale) : _key}
									data-next={
										next ? parseLink(getFullPageUrl(next), locale) : undefined
									}
									data-max-days={
										next ? getDaysToGenerate(next).length : undefined
									}
									data-weight={weight || undefined}
								>
									<ContentBlock value={content} />
									{modalReference ? (
										<InfoModal
											id={_key}
											title={modalReference.title}
											label={modalReference.title}
											slot="after-label"
										>
											<ContentBlock value={modalReference.content} />
										</InfoModal>
									) : null}
								</Control>
							),
						)
					}
				</Stack>
				{
					secondGroup.length ? (
						<Disclosure>
							<DisclosureItem
								label={showMore.label.this}
								labelActive={showMore.label.that}
								headingStyledAs={5}
							>
								<Stack gap={4}>
									{secondGroup.map(
										({ content, next, weight, modalReference, _key }) => (
											<Control
												type={type}
												variant="tile"
												name={AnswersMultiModuleName}
												id={_key}
												value={
													next ? parseLink(getFullPageUrl(next), locale) : _key
												}
												data-next={
													next
														? parseLink(getFullPageUrl(next), locale)
														: undefined
												}
												data-max-days={
													next ? getDaysToGenerate(next).length : undefined
												}
												data-weight={weight || undefined}
											>
												<ContentBlock value={content} />
												{modalReference ? (
													<InfoModal
														id={_key}
														title={modalReference.title}
														label={modalReference.title}
														slot="after-label"
													>
														<ContentBlock value={modalReference.content} />
													</InfoModal>
												) : null}
											</Control>
										),
									)}
								</Stack>
							</DisclosureItem>
						</Disclosure>
					) : null
				}
			</Stack>
		</fieldset>

		<Submit buttons={parsedButtons} assistance={assistance} />
	</Stack>
</form>

<script>
	import { initAnswersMulti } from './AnswersMulti';
	initAnswersMulti();
</script>
