---
import { Sprite } from 'astro-icon';
import { NavigationMain } from '../Navigation';
import { getLocaleFromURL } from 'src/utilities/locale/translation';
import type { SiteSettingsProps } from 'src/utilities/api/queries';
import { useSiteSettings } from 'src/utilities/api/queries';
import { Icon } from '@design-system/elements/Icon';
import { ButtonTool } from '@design-system/elements/Button';
import { Retain } from '../Layout/Retain';

type Props = {
	highlight?: boolean;
	logoUrl: string;
	logoAlt: string;
	forceCompact?: boolean;
};

const { highlight, logoUrl, logoAlt, forceCompact } = Astro.props;
const locale = getLocaleFromURL(Astro.url.pathname);
const siteSettings: SiteSettingsProps = await useSiteSettings({
	locale,
});
---

<header
	class={`c-masthead${highlight ? ` c-masthead--highlight` : ''}${
		forceCompact ? ` c-masthead--compact` : ''
	}`}
	role="banner"
	data-module="masthead"
>
	<div class="c-masthead__top" data-module-bind="masthead__top">
		<Retain class="c-masthead__top__inner">
			<div class="c-masthead__start">
				<slot name="start" />
			</div>

			<a class="c-masthead__logo" href={logoUrl}>
				<Sprite
					class="c-masthead__logo-visual"
					name="ro-logo"
					optimize={true}
				/>
				<span class="u-visually-hidden">{logoAlt}</span>
			</a>

			<div class="c-masthead__end">
				<slot name="end" />
				{
					siteSettings.masthead?.menu?.menuButtonLabel ? (
						<>
							<ButtonTool
								class="c-masthead__button"
								type="button"
								label={siteSettings.masthead.menu.menuButtonLabel}
								showLabel
								aria-expanded="false"
								aria-controls="nav-main"
								data-module-bind="masthead__button"
							>
								<Icon
									name="mobile"
									class="c-masthead__button-icon | hide-expanded"
								/>
								<Icon
									name="cross"
									class="c-masthead__button-icon | show-expanded"
								/>
							</ButtonTool>
						</>
					) : null
				}
			</div>
		</Retain>
	</div>
	{locale.id === 'nl' || locale.id === 'en' ? <NavigationMain /> : null}
</header>

<style lang="scss">
	@use '@design-system-styles/primitives/_responsive.scss';
	@use '@design-system-styles/tools/_a11y.scss';
	@use '@design-system-styles/tools/_rem.scss';

	.c-masthead {
		--masthead-logo-block-size: #{rem.convert(80px)};
		--masthead-inline-padding: var(--space-6);
		--masthead-logo-spacer: 0px;
		position: var(--masthead-position, absolute);
		z-index: var(--masthead-z-index, unset);
		display: grid;
		grid-template-areas: var(
			--masthead-template-areas,
			'top top' 'main drawer'
		);
		grid-template-rows:
			calc(var(--masthead-logo-block-size) + var(--masthead-logo-spacer))
			1fr;
		grid-template-columns: 1fr var(--theme-main-menu-open-size);
		inline-size: 100%;
		block-size: var(--masthead-block-size, var(--body-block-size));
		background-color: var(--masthead-background, var(--color-donkerblauw));

		@media (--mq-large) {
			--masthead-logo-spacer: var(--masthead-inline-padding);
		}

		@media (--mq-huge) {
			--masthead-position: relative;
			--masthead-z-index: 50;
			--masthead-block-size: auto;
			--masthead-template-areas: 'top top' 'drawer drawer';
			--masthead-background: var(--color-poolblauw);
			padding: 0;

			& {
				--masthead-logo-block-size: #{rem.convert(102px)};
			}
		}
	}

	.c-masthead__top {
		position: relative;
		z-index: 3;
		grid-area: top;

		.c-masthead--compact & {
			@media (--mq-large) and (--mq-huge-until) {
				box-shadow: var(--elevation-frost);
			}
		}
	}

	.c-masthead__top__inner {
		display: grid;
		gap: var(--space-4);
		grid-template-columns: 1fr auto 1fr;
	}

	.c-masthead__start {
		container: layout-container / inline-size;
	}

	.c-masthead__end {
		display: flex;
		flex-wrap: wrap;
		align-items: center;
		justify-content: end;
		row-gap: var(--space-1);
		column-gap: var(--space-4);
		container: layout-container / inline-size;

		:global(.c-button-tool__label) {
			display: none;
		}
	}

	/**
	 * Hide the button labels visually when the inline size hit certain tresholds
	 */
	@container layout-container (inline-size > #{rem.convert(140px)}) and (inline-size < #{rem.convert(192px)}) {
		.c-masthead__end {
			:global(> :last-child) {
				:global(.c-button-tool__label) {
					display: block;
				}
			}
		}
	}

	@container layout-container (inline-size > #{rem.convert(192px)}) {
		.c-masthead__end {
			:global(.c-button-tool__label) {
				display: block;
			}
		}
	}

	.c-masthead__logo {
		padding-block-end: var(--masthead-logo-spacer);

		&:focus {
			outline: var(--elevation-focusring);
			outline-offset: 2px;
		}
	}

	.c-masthead__logo-visual {
		display: block;
		block-size: var(--masthead-logo-block-size);
		aspect-ratio: 54/81;
	}

	/**
	 * Button
	 */
	.c-masthead__button {
		.show-expanded {
			display: none;
		}

		&[aria-expanded='true'] {
			--button-tool-color: var(--color-white);
			--button-tool-border-color: transparent;
			--button-tool-background-color: transparent;

			.hide-expanded {
				display: none;
			}

			.show-expanded {
				display: block;
			}
		}

		@media (--mq-huge) {
			--button-tool-display: none;
		}
	}

	.c-masthead__button-icon.c-masthead__button-icon {
		--icon-size: 1em;
	}

	.c-masthead--compact {
		--masthead-logo-block-size: #{rem.convert(80px)};
	}
</style>

<script>
	import debounce from 'src/utilities/helpers/debounce';
	import {
		getKeyboardFocusableElements,
		trapFocus,
	} from 'src/utilities/helpers/a11y';
	import { mqHuge } from '@design-system/primitives/responsive';

	// select dom nodes
	const mastheadElement = document.querySelector('[data-module="masthead"]');
	const topElement = mastheadElement.querySelector(
		'[data-module-bind="masthead__top"]',
	);
	const menuButtonElement = mastheadElement.querySelector(
		'[data-module-bind="masthead__button"]',
	);
	const mainElement = document.querySelector('main') as HTMLElement;
	const navElement = mastheadElement.querySelector('[data-module="nav-main"]');

	// Store masthead spacing in a variable which can be used by other modules
	if (topElement) {
		const checkSize = () => {
			const mastheadRect = mastheadElement.getBoundingClientRect();
			const mastheadTopRect = topElement.getBoundingClientRect();
			document.documentElement.style.setProperty(
				'--theme__masthead-block-size',
				`${mastheadRect.height}px`,
			);
			document.documentElement.style.setProperty(
				'--theme__masthead-top-block-size',
				`${mastheadTopRect.height}px`,
			);
		};

		window.addEventListener('resize', debounce(checkSize));

		checkSize();
	}

	if (menuButtonElement && mainElement) {
		const trapFocusBind = trapFocus.bind(null, mastheadElement);
		const navElementFocusableElements =
			getKeyboardFocusableElements(navElement);

		const toggleFocusable = () => {
			const isExpanded =
				menuButtonElement.getAttribute('aria-expanded') === 'true';
			navElementFocusableElements.forEach((element) => {
				element.tabIndex = isExpanded
					? null
					: !window.matchMedia(mqHuge).matches
					? -1
					: null;
			});
		};

		const toggleMenu = (event: MouseEvent) => {
			event.preventDefault();
			const isExpanded =
				menuButtonElement.getAttribute('aria-expanded') === 'true';

			menuButtonElement.setAttribute(
				'aria-expanded',
				new Boolean(!isExpanded).toString(),
			);
			document.documentElement.classList.toggle('has-open-menu', !isExpanded);

			if (isExpanded) {
				// close menu
				document.removeEventListener('keydown', trapFocusBind, false);
				toggleFocusable();
			} else {
				// open menu
				document.addEventListener('keydown', trapFocusBind, false);
				toggleFocusable();
			}
		};

		menuButtonElement.addEventListener('click', toggleMenu);
		mainElement.addEventListener('click', (event) => {
			const isExpanded =
				menuButtonElement.getAttribute('aria-expanded') === 'true';
			if (isExpanded) {
				toggleMenu(event);
			}
		});

		// By default the navelement element are not focusable
		window.addEventListener('resize', debounce(toggleFocusable));
		toggleFocusable();
	}
</script>
