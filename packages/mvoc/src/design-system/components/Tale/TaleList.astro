---
import type { TaleCollectionProps } from 'src/utilities/api/queries';
import { Tale } from '.';
import { Stack } from '@mvoc/ui/components';
import { Disclosure, DisclosureItem } from '../Disclosure';
import { stringToSlug } from 'src/utilities/stringToSlug';
import { Retain } from '@mvoc/ui/components';
import { MediaBlock } from '../MediaBlock';
import { Heading } from '@mvoc/ui/elements';

interface Props extends TaleCollectionProps {
	asDisclosure?: boolean;
}

const { taleCollection, asDisclosure } = Astro.props;

let headingLevel = 2 as 1 | 2 | 3 | 4 | 5 | 6;
---

<>
	{
		asDisclosure ? (
			<Retain variant="text">
				<Disclosure>
					{taleCollection.map((tale) => {
						if (tale._type === 'taleSection') {
							headingLevel = 3;
							return (
								<MediaBlock icon={tale.image} class="c-tale-section">
									<Heading id={stringToSlug(tale.title)} level={2} styledAs={3}>
										{tale.title}
									</Heading>
								</MediaBlock>
							);
						} else {
							return (
								<DisclosureItem
									headingStyledAs={4}
									accordeon
									headingLevel={headingLevel}
									label={tale.title}
									id={stringToSlug(tale.title)}
									itemscope
									itemprop="mainEntity"
									itemtype="https://schema.org/Question"
								>
									<Tale {...tale} renderTitle={false} anchorable={false} />
								</DisclosureItem>
							);
						}
					})}
				</Disclosure>
			</Retain>
		) : (
			<Stack class="c-tale" gap={14}>
				{taleCollection.map((tale) => (
					<Tale {...tale} />
				))}
			</Stack>
		)
	}
</>

<style lang="scss">
	.c-tale-section {
		margin-block-end: var(--space-6);
	}
	.c-tale-section:not(:first-of-type) {
		margin-block-start: var(--space-16);
		margin-block-end: var(--space-6);
	}
</style>
