---
import { Chapeau } from '@design-system/elements/Chapeau';
import { Heading } from '@design-system/elements/Heading';
import { ImageProps } from 'src/utilities/api/queries';
import { Retain } from '@design-system/components/Layout/Retain';
import { Stack } from '@design-system/components/Layout/Stack';
import { Switcher } from '@design-system/components/Layout/Grid';
import { UpdatedAt } from '@design-system/elements/UpdatedAt';

interface Props {
	title: string;
	titleSuffix?: string;
	chapeau?: string;
	image?: ImageProps;
	highlight?: boolean;
	variant?: 'theme' | 'default';
	updatedAt?: string;
	isPhoto?: boolean;
	cards?: boolean;
}

const {
	title,
	titleSuffix,
	chapeau,
	image,
	highlight,
	variant,
	updatedAt,
	isPhoto,
	cards,
} = Astro.props;
---

<header
	class={`c-hero${highlight ? ` c-hero--highlight` : ''}
	${cards ? ` c-hero--cards` : ''}${variant ? ` c-hero--${variant}` : ''}${
		isPhoto ? ` c-hero--photo` : ''
	}`}
>
	<Retain>
		<slot name="prefix" />
		<Switcher class="c-hero__switcher">
			{
				image && image.src ? (
					<div class="c-hero__wrap-image">
						<img class="c-hero__image" src={image.src} alt="" />
					</div>
				) : null
			}
			<Stack gap={6}>
				<hgroup class="c-hero__hgroup">
					<Heading class="c-hero__title" level={1}>
						{title}{
							titleSuffix ? (
								<span class="c-hero__title-suffix">
									<span>{titleSuffix}</span>
								</span>
							) : (
								''
							)
						}
					</Heading>
					{updatedAt ? <UpdatedAt time={updatedAt} /> : null}
					{
						chapeau ? (
							<Chapeau
								class="c-hero__chapeau"
								variant={highlight ? 'highlight' : 'base'}
								role="presentation"
							>
								{chapeau}
							</Chapeau>
						) : null
					}
				</hgroup>
				<slot />
			</Stack>
		</Switcher>
	</Retain>
</header>

<style lang="scss">
	@use '@design-system-styles/primitives/_responsive.scss';
	@use '@design-system-styles/tools/_rem.scss';

	.c-hero {
		--hero-background: var(--theme-bg-base);
		--hero-padding: var(--density-hero);
		--hero-padding-block-start: var(--hero-padding);
		--hero-padding-block-end: var(--hero-padding);
		--hero-masthead-offset: var(--theme__masthead-top-block-size);
		position: relative;
		padding-block-start: calc(
			var(--hero-masthead-offset) + var(--hero-padding-block-start)
		);
		padding-block-end: var(--hero-padding-block-end);
		color: var(--color-donkerblauw);
		background-color: var(--hero-background);

		.c-hero__switcher {
			--switcher-align-items: center;
		}

		@media --mq-large {
			--hero-masthead-offset: 0px;
		}
	}

	.c-hero__wrap-image {
		@media --mq-large {
			order: 2;
		}
	}

	.c-hero__image {
		block-size: rem.convert(160px);
		max-inline-size: rem.convert(272px);
		margin-inline: auto;
		object-fit: contain;

		@media --mq-large {
			block-size: rem.convert(224px);
			max-inline-size: 100%;
		}
	}

	.c-hero__hgroup {
		display: flex;
		flex-direction: column;
		gap: var(--space-4);
	}

	.c-hero__title {
		order: 3;
	}

	.c-hero__title-suffix {
		display: block;
		margin-block-start: var(--space-3);
		font-weight: bold;

		> span {
			display: inline;
			padding-block: var(--space-1);
			padding-inline: var(--space-4);
			border-radius: var(--space-1);
			background-color: var(--color-white);
			line-height: 1.22;
			box-decoration-break: clone;
			-webkit-box-decoration-break: clone;
		}
	}

	.c-hero__chapeau {
	}

	// Variants
	.c-hero--highlight {
		--hero-background: var(--theme-bg-highlight);
		--hero-border-radius: var(--radii-huge);
		// --hero-padding-block-start: 0px;
		border-end-start-radius: var(--hero-border-radius);
		border-end-end-radius: var(--hero-border-radius);

		.c-hero__chapeau {
			--chapeau-font-size: var(--font-size-gamma);
			--chapeau-line-height: var(--line-height-gamma);
		}

		.c-hero__image {
			block-size: rem.convert(240px);

			@media --mq-large {
				block-size: rem.convert(400px);
			}
		}
	}

	.c-hero--cards {
		--hero-padding-block-end: calc(var(--hero-padding) * 2);

		@media --mq-large {
			--hero-padding-block-end: calc(var(--hero-padding) * 3);
		}
	}

	.c-hero--theme {
		& {
			overflow: hidden;
		}

		// Fix for menu open stuff, overflow hidden inside overflow hidden hides the element entirely ðŸ˜…
		:global(.has-open-menu) & {
			overflow: unset;
		}

		.c-hero__title {
			font-weight: normal;
		}

		@media --mq-medium-until {
			.c-hero__wrap-image {
				margin-inline-end: -40%;
			}
		}

		@media --mq-large-until {
			.c-hero__switcher {
				--switcher-threshold: 0px;
			}
			.c-hero__wrap-image {
				order: 2;
			}
		}
	}

	.c-hero--photo {
		.c-hero__wrap-image {
			overflow: hidden;
			border-radius: var(--radii-milli);
		}

		.c-hero__image {
			block-size: auto;
			max-inline-size: 100%;
			object-fit: cover;
		}
	}
</style>
