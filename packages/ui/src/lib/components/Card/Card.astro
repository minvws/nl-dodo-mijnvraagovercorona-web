---
import type { HTMLAttributes } from 'astro/types';
interface Props extends HTMLAttributes<'div'> {
	variant?: 'base' | 'filled' | 'frost' | 'white' | 'canvas' | 'image';
}

const { variant = 'base', class: className, ...attrs } = Astro.props;
---

<div
	class={`c-card${variant ? ` c-card--${variant}` : ''}${
		className ? ` | ${className}` : ''
	}`}
	{...attrs}
>
	<slot />
</div>

<style lang="scss">
	.c-card {
		--card-border-width: 1px;
		--card-border-color: var(--color-lichtblauw);
		--card-padding: var(--density-compact);
		background-color: var(
			--external-alternative-background,
			var(--card-background-color, transparent)
		);
		padding: calc(var(--card-padding) - var(--card-border-width));
		border-radius: var(--radii-nano);
		border: var(--card-border-width) solid var(--card-border-color);
	}

	/**
	 * Variants
	 * 1. Pass down an alternative button background color
	 */
	.c-card--filled {
		--card-border-width: 0px;
		--card-background-color: var(--color-ijsblauw);
		--external__button--quaternary__background: var(--color-white); /* [1] */
		color: var(--color-diepblauw);

		:global([class*='u-background--']) & {
			--card-background-color: var(--color-white);
		}
	}

	.c-card--frost {
		--card-border-width: 0px;
		background-image: var(--gradient-lichtblauw);
		box-shadow: var(--elevation-frost);
	}

	.c-card--white {
		--card-border-width: 0px;
		--card-background-color: var(--color-white);
		color: var(--color-black);
	}

	.c-card--canvas {
		--card-border-width: 0px;
		--card-background-color: var(--color-white);
		box-shadow: var(--elevation-frost);
	}

	.c-card--image {
		--card-border-width: 1px;
		--card-border-color: var(--color-poolblauw);
		border-radius: var(--radii-nano);
		box-shadow: var(--elevation-frost);
		overflow: hidden;
	}
</style>
