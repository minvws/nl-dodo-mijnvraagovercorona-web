---
import { HTMLAttributes } from 'astro/types';
import { Icon, IconProps } from '@design-system/elements/Icon';
import { Animations } from '@design-system/primitives/animation';

// Interfaces
interface Shared {
	variant?: 'tooltip' | 'restart' | 'back';
	icon?: IconProps['name'];
	iconPosition?: 'leading' | 'trailing';
	interactionIconAnimation?: Animations;
}

interface Button extends HTMLAttributes<'button'>, Shared {}

interface Link extends HTMLAttributes<'a'>, Shared {
	disabled?: boolean;
	external?: boolean;
	hiddenLabel?: string;
}

type Props = Button | Link;

const {
	disabled,
	variant,
	external,
	hiddenLabel,
	icon,
	iconPosition,
	interactionIconAnimation,
	...attrs
} = Astro.props;

// Which element should we render?
const Element = attrs.href || attrs.href === '' ? 'a' : 'button';

// Create class based on props
const combinedClasses = `e-link${variant ? ` e-link--${variant}` : ''}${
	interactionIconAnimation
		? ` | u-animation-interaction--${interactionIconAnimation}`
		: ''
}${attrs.class ? ` | ${attrs.class}` : ''}`;

const iconPositionCalculated =
	variant === 'back' || variant === 'restart' || iconPosition === 'leading'
		? 'leading'
		: 'trailing';

const selectedIcon =
	attrs.href && external
		? 'external'
		: variant === 'tooltip'
		? 'tooltip'
		: variant === 'restart'
		? 'refresh'
		: variant === 'back'
		? 'chevron-large-left'
		: icon
		? icon
		: undefined;
---

<Element
	{...attrs}
	class={combinedClasses}
	type={!attrs.href && attrs.type ? (attrs.type as Button['type']) : undefined}
	disabled={!attrs.href && disabled ? disabled : undefined}
	data-disabled={attrs.href && disabled ? disabled : undefined}
	formaction={!attrs.href && attrs.formaction ? attrs.formaction : undefined}
	href={attrs.href}
	target={attrs.href && external ? '_blank' : undefined}
	rel={attrs.href && external ? 'noopener noreferrer' : undefined}
	lang={attrs.href ? attrs.lang : undefined}
	hreflang={attrs.href ? attrs.lang : undefined}
>
	{
		iconPositionCalculated === 'leading' && selectedIcon ? (
			<Icon name={selectedIcon} description={hiddenLabel} />
		) : null
	}
	<span>
		<slot />
	</span>
	{
		iconPositionCalculated === 'trailing' && selectedIcon ? (
			<Icon name={selectedIcon} description={hiddenLabel} />
		) : null
	}
</Element>

<style lang="scss">
	.e-link {
		--icon-animation: none;
		--link-color: var(--color-donkerblauw);
		--link-icon-spacing: 0px;
		display: inline-flex;
		gap: var(--link-icon-spacing);
		outline: none;
		text-decoration: none;
		color: var(--link-color);
		transition-property: background-color, color, border, box-shadow;
		transition-duration: 300ms;
		transition-timing-function: ease-in-out;
		cursor: pointer;

		:global(> *) {
			vertical-align: middle;
		}

		> span {
			text-decoration: underline;
			text-underline-position: under;
		}

		:global(> .e-icon) {
			animation: var(--u-animation-subscribe);
			// &:first-child {
			// 	margin-inline-end: var(--link-icon-spacing);
			// }
			// &:last-child {
			// 	margin-inline-start: var(--link-icon-spacing);
			// }
		}

		&:hover,
		&:focus {
			color: var(--color-diepblauw);
		}

		&:focus {
			outline: 2px solid var(--color-donkerblauw);
		}

		// Variants
		&.e-link--tooltip {
			> span {
				text-decoration: underline;
				text-decoration-style: dotted;
			}
		}

		&.e-link--restart,
		&.e-link--back {
			--link-icon-spacing: 0.5em;
			font-weight: bold;

			> span {
				text-decoration: none;
			}
		}

		&.e-link--back {
			&:hover {
				--u-animation-subscribe: var(--animation-swing);
			}
		}

		&.e-link--restart {
			&:hover {
				--u-animation-subscribe: var(--animation-rotate);
			}
		}
	}
</style>
