---
import { Icon } from '@design-system/elements/Icon';
import { HTMLAttributes } from 'astro/types';
import { ImageProps } from 'src/utilities/api/queries';
import { SiteSettingsProps, useSiteSettings } from 'src/utilities/api/queries';
import { getLocaleFromURL } from 'src/utilities/locale/translation';
import { PictureProps } from '../Picture';
import { getVideoEmbedUrl } from 'src/utilities/helpers/video';
import { Button } from '@design-system/elements/Button';
import { Stack } from '../Layout/Stack';

interface Props extends HTMLAttributes<'div'> {
	title: string;
	url: string;
	image?: ImageProps;
	picture?: PictureProps;
}

const { class: className, title, url, picture, image, ...attrs } = Astro.props;
const locale = getLocaleFromURL(Astro.url.pathname);
const siteSettings: SiteSettingsProps = await useSiteSettings({ locale });
const embedUrl = getVideoEmbedUrl({ url });
---

<>
	{
		embedUrl ? (
			<div class={`c-video${className ? ` | ${className}` : ''}`} {...attrs}>
				<a
					class="c-video__cover"
					href={url}
					data-embed={embedUrl}
					target="_blank"
					rel="noopener noreferrer"
				>
					<img
						class="c-video__image"
						src={image?.src ? image.src : picture.image.src}
						alt=""
						loading="lazy"
					/>
					<Icon class="c-video__icon" name="video" />
				</a>
				<div class="c-video__cookie">
					<Stack gap={4}>
						<Icon name="cookie" class="c-video__cookie-icon" />
						<p>
							Om deze youtube video af te spelen gebruiken we cookies van derden
						</p>

						<div class="c-video__cookie-buttons">
							<Button variant="secondary">Toestaan</Button>
							<Button variant="tertiary">Weiger</Button>
						</div>
					</Stack>
				</div>
				<template>
					<iframe class="c-video__frame" src={embedUrl} />
				</template>
			</div>
		) : null
	}
</>

<style lang="scss">
	@use '@design-system-styles/tools/_a11y.scss';

	.c-video {
		--_video-aspect-ratio: var(--video-aspect-ratio, 16/9);
		--_video-color: var(--video-color, var(--color-diepblauw));
		position: relative;
		display: block;
	}

	.c-video__cover {
		position: relative;
		display: block;
		color: var(--_video-color);

		&::after {
			position: absolute;
			inset-block: 0;
			inset-inline: 0;
			background-image: linear-gradient(
				180deg,
				rgba(0, 0, 0, 0.6) 0%,
				rgba(0, 0, 0, 0) 100%
			);
			content: '';
		}

		&:focus {
			@include a11y.focusring;
		}

		&:hover,
		&:focus {
			--_video-color: var(--color-accent-robijnrood);
		}
	}

	.c-video__frame,
	.c-video__image {
		display: block;
		inline-size: 100%;
		block-size: auto;
		aspect-ratio: var(--_video-aspect-ratio);
	}

	.c-video__image {
		object-fit: cover;
	}

	.c-video__icon.c-video__icon {
		--icon-size: var(--space-16);
		position: absolute;
		inset: 50% 50%;
		translate: -50% -50%;
		z-index: 1;
	}

	.c-video__cookie {
		position: absolute;
		z-index: 2;
		inset: var(--space-2);
		display: grid;

		padding: var(--space-6);
		background-color: var(--color-white);

		> * {
			place-self: center;
		}
	}

	.c-video__cookie-icon {
		color: var(--color-diepblauw);
	}

	.c-video__cookie-buttons {
		display: flex;
		flex-flow: row-reverse wrap;
		justify-content: space-between;
		gap: var(--space-6);

		> * {
			min-inline-size: auto;
		}
	}
</style>
