<ul class="disclosure" role="list" data-module="disclosure">
	<slot />
</ul>

<script>
	// variables
	const items = [
		...document.querySelectorAll<HTMLElement>(
			'[data-module-bind="disclosure__item"]',
		),
	];

	const getPanelDimensions = (panel: HTMLElement) => {
		const panelInner = panel.querySelector(
			'[data-module-bind="disclosure__panel-inner"]',
		);
		const rect = panelInner.getBoundingClientRect();
		return { blockSize: rect.height, inlineSize: rect.width };
	};

	/**
	 * Check if an item is open
	 */
	const isOpen = (item: HTMLElement) => {
		return item.classList.contains('is-active');
	};

	/**
	 * Open accordion item
	 */
	const openItem = (item: HTMLElement) => {
		const toggle = item.querySelector(
			'[data-module-bind="disclosure__toggle"]',
		);
		const itemPanel = item.querySelector(
			'[data-module-bind="disclosure__panel"]',
		) as HTMLElement;

		item.classList.add('is-active');
		toggle.setAttribute('aria-expanded', new Boolean(true).toString());
		const dimensions = getPanelDimensions(itemPanel);
		itemPanel.style.blockSize = `${dimensions.blockSize}px`;
	};

	/**
	 * Close accordion item
	 */
	const closeItem = (item: HTMLElement) => {
		const toggle = item.querySelector(
			'[data-module-bind="disclosure__toggle"]',
		) as HTMLElement;
		const itemPanel = item.querySelector(
			'[data-module-bind="disclosure__panel"]',
		) as HTMLElement;

		item.classList.remove('is-active');
		toggle.focus();
		toggle.setAttribute('aria-expanded', new Boolean(false).toString());
		// reset hard block size for the animation to be able to run
		// (we can't animate auto to 0)
		const dimensions = getPanelDimensions(itemPanel);
		itemPanel.style.blockSize = `${dimensions.blockSize}px`;
		// 1 frame later, set the bocksize to 0 to kick off the animation
		window.requestAnimationFrame(() => {
			itemPanel.style.blockSize = `0px`;
		});
	};

	/**
	 * Toggle an item
	 */
	const toggleItem = (item: HTMLElement) => {
		isOpen(item) ? closeItem(item) : openItem(item);
	};

	/**
	 * Execute all items
	 */
	items.forEach((item, index) => {
		const toggle = item.querySelector(
			'[data-module-bind="disclosure__toggle"]',
		);

		const itemPanel = item.querySelector(
			'[data-module-bind="disclosure__panel"]',
		) as HTMLElement;

		toggle.setAttribute('id', `accordion-item${index + 1}`);
		itemPanel.setAttribute('id', `item${index + 1}`);

		toggle.setAttribute('aria-controls', `item${index + 1}`);
		itemPanel.setAttribute('aria-labelledby', `accordion-item${index + 1}`);

		toggle.addEventListener('click', () => {
			toggleItem(item);
		});

		/**
		 * When the animation is completed, set the height of an item to auto so
		 * it can scale again when resizing the browser
		 */
		itemPanel.addEventListener('transitionend', (event) => {
			if (event.target === itemPanel && isOpen(item)) {
				itemPanel.style.blockSize = `auto`;
			}
		});
	});

	/**
	 * Escape key can close an item when its open and the focus is within the item
	 */
	document.addEventListener('keydown', (event) => {
		const item = (event.target as Element).closest(
			'[data-module-bind="disclosure__item"]',
		) as HTMLElement;

		if (event.key !== 'Escape') return;
		if (!item) return;

		if (isOpen(item)) {
			closeItem(item);
		}
	});

	/**
	 * Items can be traversed by arrow down and up
	 */
	document.addEventListener('keydown', (event) => {
		if (
			!(event.target as Element).closest(
				'[data-module-bind="disclosure__toggle"]',
			)
		)
			return;

		const accordionWrapper = (event.target as Element).closest(
			'[data-module="disclosure"]',
		);
		const item = (event.target as Element).closest(
			'[data-module-bind="disclosure__item"]',
		);
		const items = [
			...accordionWrapper.querySelectorAll<HTMLElement>(
				'[data-module-bind="disclosure__item"]',
			),
		];
		const index = items.findIndex((element) => element === item);

		const { key } = event;

		let targetItem =
			key === 'ArrowDown'
				? items[index + 1]
				: key === 'ArrowUp'
				? items[index - 1]
				: undefined;

		if (targetItem) {
			event.preventDefault();
			targetItem
				.querySelector<HTMLElement>('[data-module-bind="disclosure__toggle"]')
				.focus();
		}
	});

	/**
	 * When an item is targetted from a hash in the url, it will be
	 * automatically expanded
	 */
	if (window.location.hash) {
		const hash = window.location.hash.substring(1);
		const element = document.getElementById(hash);
		if (element) {
			const item = element.closest('.disclosure__item') as HTMLElement;
			if (item) {
				openItem(item);
			}
		}
	}
</script>

<style lang="scss">
	.disclosure {
		list-style: none;
		padding: 0;
	}
	:global([data-page-type='campaign-page'] .disclosure) {
		--grid-fluid-min-item-size: var(--space-100);
		--grid-fluid-gap: var(--space-4);
		--stack-gap: var(--space-3);
		display: grid;
		grid-template-columns: repeat(
			var(--grid-fluid-placement, auto-fill),
			minmax(min(var(--grid-fluid-min-item-size, 16rem), 100%), 1fr)
		);
		gap: var(--grid-fluid-gap, var(--space-6));
		align-items: start;
	}
</style>
