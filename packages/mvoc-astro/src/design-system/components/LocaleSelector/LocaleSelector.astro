---
import { Icon } from '@design-system/elements/Icon';
import { Link } from '@design-system/elements/Link';
import {
	getCurrentUrlForLocale,
	Locale,
} from 'src/utilities/locale/translation';

interface Props {
	locales: Locale[];
	currentLocale: Locale;
	labelChange: string;
	labelCurrent: string;
}

const { locales, currentLocale, labelChange, labelCurrent } = Astro.props;
---

<div class="c-locale-selector" data-module="locale-selector">
	<button
		type="button"
		class="c-locale-selector__toggle"
		id="locale-selector-toggle"
		aria-controls="locale-selector-panel"
		aria-expanded="false"
		data-module-bind="locale-selector__toggle"
	>
		<span class="u-visually-hidden">{labelChange}</span>
		<span class="u-visually-hidden">{labelCurrent}:</span>
		<span class="c-locale-selector__short-name" aria-hidden="true">
			{currentLocale.shortName.toUpperCase()}
		</span>
		<span class="c-locale-selector__full-name">{currentLocale.fullName}</span>
		<Icon name="world" class="c-locale-selector__icon" />
	</button>
	<div
		class="c-locale-selector__panel"
		id="locale-selector-panel"
		aria-labelledby="locale-selector-toggle"
		data-module-bind="locale-selector__panel"
	>
		<ul role="list" data-module-bind="locale-selector__panel-inner">
			{
				locales
					.filter((locale) => locale.id !== currentLocale.id)
					.map((locale) => (
						<li>
							<Link
								href={getCurrentUrlForLocale(
									Astro.url.pathname,
									locale,
									currentLocale,
								)}
								class="c-locale-selector__link"
							>
								{locale.fullName}
							</Link>
						</li>
					))
			}
		</ul>
	</div>
</div>

<script>
	// Cache HTML elements
	const parent = document.querySelector(
		'[data-module="locale-selector"]',
	) as HTMLElement;
	const toggle = parent.querySelector(
		'[data-module-bind="locale-selector__toggle"]',
	) as HTMLElement;
	const panel = parent.querySelector(
		'[data-module-bind="locale-selector__panel"]',
	) as HTMLElement;
	const panelInner = parent.querySelector(
		'[data-module-bind="locale-selector__panel-inner"]',
	) as HTMLElement;

	const getPanelDimensions = () => {
		const rect = panelInner.getBoundingClientRect();
		return { blockSize: rect.height, inlineSize: rect.width };
	};

	const open = () => {
		const dimensions = getPanelDimensions();
		panel.style.blockSize = `${dimensions.blockSize}px`;
		parent.classList.add('is-active');
		toggle.setAttribute('aria-expanded', 'true');
	};

	const close = (focus = true) => {
		parent.classList.remove('is-active');
		panel.style.blockSize = '0';
		if (focus) toggle.focus();
		toggle.removeAttribute('aria-expanded');
	};

	const togglePanel = () =>
		parent.classList.contains('is-active') ? close() : open();

	toggle.addEventListener('click', togglePanel);

	// Handle outside click
	document.body.addEventListener('click', (event) => {
		if (
			!(event.target as HTMLElement).closest('[data-module="locale-selector"]')
		) {
			close(false);
		}
	});
</script>

<style lang="scss">
	@use '@design-system-styles/primitives/_responsive.scss';
	@use '@design-system-styles/tools/_a11y.scss';

	.c-locale-selector {
		--c-locale-selector-duration: 0.2s;
		--locale-selector-border: var(--variant--tile-border);
		--locale-selector-box-shadow: var(--variant--tile-elevation);
		position: absolute;
		inset-block-start: var(--space-r-small);
		inset-inline-end: var(--space-r-small);
		margin-inline-start: auto;
		padding-block: calc(var(--space-r-tiny) - 1px);
		padding-inline: calc(var(--space-r-small) - 1px);
		border-radius: var(--radii-milli);
		border: var(--locale-selector-border);
		box-shadow: var(--locale-selector-box-shadow);
		background-color: var(--color-white);

		&:focus-within,
		&.is-active {
			--locale-selector-border: var(--variant--tile-border-interactive);
			--locale-selector-box-shadow: var(--variant--tile-elevation-interactive);
		}

		@media --mq-large {
			inset-block-start: var(--space-r-base);
		}
	}

	.c-locale-selector__toggle {
		width: 100%;
		display: flex;
		align-items: center;
		justify-content: flex-end;
		outline: none;
		color: var(--color-diepblauw);
		font-weight: bold;
		cursor: pointer;
	}

	.c-locale-selector__full-name {
		:where(.c-locale-selector:not(.is-active)) & {
			@media --mq-large-until {
				@include a11y.visually-hidden;
			}
		}
	}

	.c-locale-selector__short-name {
		:where(.c-locale-selector.is-active) & {
			display: none;
		}

		@media --mq-large {
			display: none;
		}
	}

	.c-locale-selector__icon {
		margin-inline-start: var(--space-s-milli);
	}

	.c-locale-selector__link {
		outline: none;

		&:global(> span) {
			text-decoration: none;
		}

		&:focus,
		&:hover {
			outline: none;
			&:global(> span) {
				text-decoration: underline;
			}
		}
	}

	.c-locale-selector__panel {
		visibility: hidden;
		overflow: hidden;
		block-size: 0;
		inline-size: 0;
		transition: block-size var(--c-locale-selector-duration) ease-in-out,
			visibility 0s var(--c-locale-selector-duration);
	}

	.c-locale-selector.is-active {
		.c-locale-selector__panel {
			visibility: visible;
			block-size: auto;
			inline-size: auto;
			transition: block-size var(--c-locale-selector-duration) ease-in-out,
				visibility 0s 0s;
		}
	}
</style>
