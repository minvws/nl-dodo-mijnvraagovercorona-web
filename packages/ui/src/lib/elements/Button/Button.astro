---
import type { HTMLAttributes } from 'astro/types';
import { type IconProps, Icon } from '@mvoc/ui/elements';
import type { Animations } from '@mvoc/ui/primitives';
import type { ButtonVariants, IconPositions } from './';

// Interfaces
export interface Shared {
	variant?: ButtonVariants;
	icon?: IconProps['name'];
	iconPosition?: IconPositions;
	interactionIconAnimation?: Animations;
	full?: boolean;
	href?: string | URL | undefined | null;
	formaction?: string | undefined | null;
	hiddenLabel?: string;
	isExternal?: boolean;
}

interface ButtonProps extends HTMLAttributes<'button'>, Shared {}

interface LinkProps extends HTMLAttributes<'a'>, Shared {
	disabled?: boolean;
	hiddenLabel?: string;
}

type Props = ButtonProps | LinkProps;

const {
	disabled,
	variant,
	hiddenLabel,
	icon,
	iconPosition,
	interactionIconAnimation,
	full,
	type,
	isExternal,
	class: className,
	...attrs
} = Astro.props;

// Which element should we render?
const Element = attrs.href || attrs.href === '' ? 'a' : 'button';

const isExternalUrl = attrs.href && isExternal;

// Create class based on props
const combinedClasses = `e-button${variant ? ` e-button--${variant}` : ''}${
	full ? ` e-button--full` : ''
}${
	!isExternalUrl && interactionIconAnimation
		? ` | u-animation-interaction--${interactionIconAnimation}`
		: ''
}${className ? ` | ${className}` : ''}`;

const iconPositionCalculated =
	iconPosition === 'leading' ? 'leading' : 'trailing';

/**
 * Leading icon
 * 1. Show icon if position is leading and an icon is set
 * 2. Otherwise omit the icon
 */
const leadingIcon =
	iconPositionCalculated === 'leading' && icon ? icon : undefined;

/**
 * Trailing icon
 * 1. Always display external icon if the link is external
 * 2. If there is an icon and position is trailing show the icon
 * 3. Otherwise omit the icon
 */
const trailingIcon = isExternalUrl
	? 'external'
	: icon && iconPositionCalculated === 'trailing'
	? icon
	: undefined;
---

<Element
	class={combinedClasses}
	type={!attrs.href ? (type ? (type as Button['type']) : 'button') : undefined}
	disabled={!attrs.href && disabled ? disabled : undefined}
	data-disabled={attrs.href && disabled ? disabled : undefined}
	formaction={!attrs.href && attrs.formaction ? attrs.formaction : undefined}
	href={attrs.href}
	target={attrs.href && isExternalUrl ? '_blank' : undefined}
	rel={attrs.href && isExternalUrl ? 'noopener noreferrer' : undefined}
	lang={attrs.href ? attrs.lang : undefined}
	hreflang={attrs.href ? attrs.lang : undefined}
	{...attrs}
>
	{
		leadingIcon ? (
			<Icon
				class="e-button__icon--leading"
				name={leadingIcon}
				description={hiddenLabel}
			/>
		) : null
	}
	<span class="e-button__label" data-button-content>
		<slot />
	</span>
	{
		trailingIcon ? (
			<Icon
				class="e-button__icon--trailing"
				name={trailingIcon}
				description={hiddenLabel}
			/>
		) : null
	}
</Element>

<style lang="scss" is:global>
	@use '@mvoc/ui/styles/tools/rem';
	:where(html) {
		--button-border-size: 1px;
		--button-border-color: transparent;
		--button-border-elevation-color: transparent;
		--button-elevation-color: var(--color-accent-wijnrood);
		--button-elevation-size: 4px;
		--button-padding: var(--space-4);
		--button-padding-block: var(--button-padding);
		--button-padding-inline: var(--button-padding);
		--button-border-radius: var(--radii-milli);
		--button-font-size: #{rem.convert(18px)};
		--button-line-height: var(--font-lineheight-root); // 28px
		--button-background-color: var(--color-accent-robijnrood);
		--button-color: var(--color-white);
		--button-icon-color: currentColor;
		--button-inset-color: var(--color-accent-wijnrood);
	}
</style>

<style lang="scss">
	@use '@mvoc/ui/styles/primitives/responsive';
	@use '@mvoc/ui/styles/tools/a11y';
	@use '@mvoc/ui/styles/tools/rem';
	@use '@mvoc/ui/styles/tools/button';

	.e-button {
		@include button.scaffold();

		@media (--mq-large) {
			& {
				min-inline-size: auto;
			}
		}
	}

	.e-button__label {
		word-wrap: break-word;
		hyphens: auto;
		&:first-letter {
			text-transform: uppercase;
		}
	}

	.e-button__icon--trailing {
		margin-inline-start: auto;
	}

	// variants
	.e-button--secondary {
		--button-background-color: var(--color-donkerblauw);
		--button-elevation-color: var(--color-diepblauw);

		&:hover {
			--button-background-color: var(--color-diepblauw);
			--button-elevation-color: var(--color-nachtblauw);
		}

		&:active {
			--button-elevation-size: 0px;
		}
	}

	.e-button--tertiary,
	.e-button--quaternary {
		--button-color: var(--color-donkerblauw);
		--button-border-color: var(--variant--tile-border-color);
		--button-elevation-color: var(--button-border-color);
		--button-border-size: 1px;
		text-align: left;

		&:hover {
			--button-border-color: var(--variant--tile-border-color-interactive);
			--button-elevation-color: var(--button-border-color);
		}
	}

	.e-button--tertiary {
		&,
		&:hover,
		&:focus {
			--button-background-color: var(--color-white);
		}
	}

	.e-button--quaternary {
		--button-icon-color: var(--color-accent-robijnrood);

		&,
		&:hover,
		&:focus {
			--button-background-color: var(
				--external__button--quaternary__background,
				var(--color-ijsblauw)
			);
		}
		font-weight: bold;
	}

	.e-button--quinary {
		--button-background-color: var(--color-white);
		--button-color: var(--color-donkerblauw);
		--button-border-color: var(--color-donkerblauw);
		--button-padding-block: var(--space-2);
		--button-elevation-size: 0px;
		--button-border-radius: calc(
			var(--button-padding-block) * 2 + var(--font-lineheight-root) * 1em
		);

		&:hover {
			--button-background-color: var(--color-poolblauw);
			--button-border-color: var(--color-donkerblauw);
			--button-elevation-color: var(--color-nachtblauw);
		}

		&.is-active {
			--button-background-color: var(--color-donkerblauw);
			--button-color: var(--color-white);
			--button-border-color: transparent;
			--button-elevation-size: 4px;
			--button-elevation-color: var(--color-nachtblauw);
		}
	}

	.e-button--full {
		inline-size: 100%;
	}
</style>
