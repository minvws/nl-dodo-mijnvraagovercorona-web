---
import Layout from '../../../layouts/Layout.astro';
import { availableLocales, Locale } from 'src/utilities/locale/translation';
import { PZALandingPageProps, getDataPZALandingPages } from 'src/utilities/api';
import { Hero } from '@design-system/components/Hero';
import { ContentBlock } from '@design-system/components/ContentBlock';
import Button from '@design-system/elements/Button/Button.astro';
import Stack from '@design-system/components/Layout/Stack/Stack.astro';
import { Retain } from '@design-system/components/Layout/Retain';
import { Layer } from '@design-system/components/Layout/Layer';
import { Sidebar } from '@design-system/components/Layout/Sidebar';
import { CardPrivacy } from '@design-system/components/Card';
import { TaleList } from '@design-system/components/Tale';
import { Assistance } from '@design-system/components/Assistance';
import {
	getFullPageUrl,
	getPageSubfolder,
} from 'src/utilities/helpers/page-subfolder';
import { Feedback } from '@design-system/components/Feedback';
import { getFeedbackUrl } from 'src/utilities/tracking/feedback';
import { SiteSettingsProps, useSiteSettings } from 'src/utilities/api/queries';
import { Breadcrumbs } from '@design-system/components/Breadrumbs';
import { parseLink } from 'src/utilities/helpers/link';

export async function getStaticPaths() {
	const collection = await getDataPZALandingPages();
	return (
		collection
			// filter out unavailable locales
			.filter(
				(page: PZALandingPageProps) =>
					availableLocales.filter((locale) => locale.id === page.localeID)
						.length,
			)
			.map((page: PZALandingPageProps) => ({
				params: {
					slug: getPageSubfolder(page),
					locale: page.localeID,
					pzaLanding: page.slug,
				},
				props: {
					pageData: page,
					locale: availableLocales.filter(
						(locale) => locale.id === page.localeID,
					)[0],
				},
			}))
	);
}

interface Props {
	pageData: PZALandingPageProps;
	locale: Locale;
}

const { pageData, locale } = Astro.props;
const siteSettings: SiteSettingsProps = await useSiteSettings({
	locale,
});
---

<Layout
	locale={locale}
	metaData={pageData.metaData}
	alternativeTranslations={pageData.alternatives}
	mastheadHighlight
	type={pageData.type}
>
	<Hero
		title={pageData.hero.title}
		image={pageData.hero.image}
		chapeau={pageData.hero.chapeau}
		updatedAt={pageData.hero.showUpdatedAt ? pageData.updatedAt : undefined}
		highlight
	>
		<Breadcrumbs breadcrumbs={pageData.breadcrumbs} slot="prefix" />
		<Stack class="c-hero__content">
			<Stack class="has__list-styled">
				<ContentBlock value={pageData.hero.content} />
			</Stack>
			{
				pageData.buttons ? (
					<ul class="c-hero__wrap-buttons" role="list">
						{pageData.buttons.map((button) => (
							<li>
								<Button
									variant={button.variant}
									href={parseLink(
										getFullPageUrl(button.slugCollection),
										locale,
									)}
									icon={button.icon}
								>
									{button.label}
								</Button>
							</li>
						))}
					</ul>
				) : null
			}
			{
				pageData.contentSecondary ? (
					<Stack class="has__list-styled">
						<ContentBlock value={pageData.contentSecondary} />
					</Stack>
				) : null
			}
		</Stack>
	</Hero>

	{
		pageData.taleCollection ? (
			<Layer pullUpBy={'hero'}>
				<Retain>
					<Sidebar>
						<Stack gap={14}>
							<TaleList taleCollection={pageData.taleCollection} />
							<Feedback
								name="Prikken Home"
								url={getFeedbackUrl(siteSettings.feedback.url, {
									source: 'Prikken Home',
								})}
							/>
						</Stack>
						<Stack slot="aside">
							<CardPrivacy />
						</Stack>
					</Sidebar>
				</Retain>
			</Layer>
		) : null
	}
	{
		pageData.assistance ? (
			<Layer background="ijsblauw">
				<Retain>
					<Assistance {...pageData.assistance} />
				</Retain>
			</Layer>
		) : null
	}
</Layout>

<style lang="scss">
	@use '@design-system-styles/tools/_list.scss';
	.c-hero__wrap-buttons {
		display: flex;
		flex-flow: row wrap;
		gap: var(--space-4);
	}
</style>
