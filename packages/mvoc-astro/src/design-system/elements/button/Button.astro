---
import { HTMLAttributes } from 'astro/types';
import Icon, {
	Props as IconProps,
} from '@design-system/elements/icon/Icon.astro';
import { Animations } from '@design-system/primitives/animation';

// Interfaces
interface Shared {
	variant?: 'primary' | 'secondary' | 'tertiary';
	icon?: IconProps['name'];
	iconPosition?: 'leading' | 'trailing';
	interactionIconAnimation?: Animations;
}

interface Button extends HTMLAttributes<'button'>, Shared {}

interface Link extends HTMLAttributes<'a'>, Shared {
	disabled?: boolean;
	external?: boolean;
}

type Props = Button | Link;

const {
	disabled,
	variant,
	external,
	icon,
	iconPosition,
	interactionIconAnimation,
	...attrs
} = Astro.props;

// Which element should we render?
const Element = attrs.href || attrs.href === '' ? 'a' : 'button';

// Create class based on props
const combinedClasses = `e-button${variant ? ` e-button--${variant}` : ''}${
	interactionIconAnimation
		? ` | u-animation-interaction--${interactionIconAnimation}`
		: ''
}${attrs.class ? ` | ${attrs.class}` : ''}`;
---

<Element
	{...attrs}
	class={combinedClasses}
	type={!attrs.href && attrs.type ? (attrs.type as Button['type']) : undefined}
	disabled={!attrs.href && disabled ? disabled : undefined}
	data-disabled={attrs.href && disabled ? disabled : undefined}
	formaction={!attrs.href && attrs.formaction ? attrs.formaction : undefined}
	href={attrs.href}
	target={attrs.href && external ? '_blank' : undefined}
	rel={attrs.href && external ? 'noopener noreferrer' : undefined}
	lang={attrs.href ? attrs.lang : undefined}
	hreflang={attrs.href ? attrs.lang : undefined}
>
	{
		iconPosition === 'leading' ? (
			attrs.href && external ? (
				<Icon name="external" />
			) : icon ? (
				<Icon name={icon} />
			) : null
		) : null
	}
	<slot />
	{
		iconPosition !== 'leading' ? (
			attrs.href && external ? (
				<Icon name="external" />
			) : icon ? (
				<Icon name={icon} />
			) : null
		) : null
	}
</Element>

<style lang="scss">
	@use "../../primitives/responsive";
	.e-button {
		--button-border-width: 1px;
		--button-border-color: var(--button-background-color);
		--button-padding: var(--space-r-small);
		--button-background-color: var(--color-accent-robijnrood);
		--button-color: var(--color-white);

		display: inline-flex;
		align-items: center;
		justify-content: space-between;
		gap: var(--space-r-small);
		inline-size: 100%;
		padding: calc(var(--button-padding) - var(--button-border-width));
		border: var(--button-border-width) solid var(--button-border-color);
		border-radius: var(--radii-small);
		text-align: center;
		text-decoration: none;
		background-color: var(--button-background-color);
		color: var(--button-color);
		transition-property: background-color, color, border, box-shadow;
		transition-duration: 300ms;
		transition-timing-function: ease-in-out;
		cursor: pointer;

		:global(> svg) {
			animation: var(--u-animation-subscribe);
		}

		&:hover,
		&:focus {
			--button-background-color: var(--color-accent-violet);
		}

		&:focus {
			outline: 2px solid var(--color-donkerblauw);
			outline-offset: 2px;
		}

		// variants
		&.e-button--secondary {
			--button-background-color: var(--color-donkerblauw);

			&:hover,
			&:focus {
				--button-background-color: var(--color-diepblauw);
			}
		}

		&.e-button--tertiary {
			--button-background-color: var(--color-white);
			--button-color: var(--color-donkerblauw);
			--button-border-color: var(--color-poolblauw);
			box-shadow: var(--elevation-tile) var(--button-border-color);
			outline: none;

			&:hover,
			&:focus {
				--button-background-color: var(--color-white);
				--button-border-color: var(--button-color);
			}
		}

		&:disabled,
		&[data-disabled] {
			--button-background-color: var(--color-grijs-4);
			cursor: not-allowed;
		}

		@media --mq-large {
			& {
				inline-size: auto;
			}
		}
	}
</style>
