---
import { Button } from '@design-system/elements/Button';
import { Icon } from '@design-system/elements/Icon';
import { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'li'> {
	label: string;
	labelActive?: string;
	headingLevel?: 1 | 2 | 3 | 4 | 5 | 6;
	accordeon?: boolean;
}

const {
	label,
	labelActive,
	accordeon,
	headingLevel = 3,
	...attrs
} = Astro.props;

// TODO fix any
const HeadingElement = `h${headingLevel}` as any;
---

<li
	class={`disclosure__item ${accordeon ? 'disclosure__item--accordeon' : ''}`}
	data-module-bind="disclosure__item"
	{...attrs}
>
	<HeadingElement class="disclosure__heading" itemprop="name">
		{
			accordeon ? (
				<Button
					id="disclosure-header-1"
					class="disclosure__toggle--button"
					aria-expanded="false"
					aria-controls="disclosure-panel-1"
					data-module-bind="disclosure__toggle"
					variant="quaternary"
					full
					icon="chevron-small-down"
					iconPosition="trailing"
				>
					<span class={labelActive ? 'disclosure__show-inactive' : undefined}>
						{label}
					</span>
					{labelActive ? (
						<span class="disclosure__show-active">{labelActive}</span>
					) : null}
				</Button>
			) : (
				<button
					type="button"
					id="disclosure-header-1"
					class="disclosure__toggle"
					aria-expanded="false"
					aria-controls="disclosure-panel-1"
					data-module-bind="disclosure__toggle"
				>
					<Icon name="plus" class="disclosure__show-inactive" />
					<Icon name="minus" class="disclosure__show-active" />
					<span class={labelActive ? 'disclosure__show-inactive' : undefined}>
						{label}
					</span>
					{labelActive ? (
						<span class="disclosure__show-active">{labelActive}</span>
					) : null}
				</button>
			)
		}
	</HeadingElement>

	<div
		id="disclosure-panel-1"
		role="region"
		class="disclosure__panel"
		data-module-bind="disclosure__panel"
		aria-labelledby="disclosure-header-1"
		itemscope
		itemprop="acceptedAnswer"
		itemtype="https://schema.org/Answer"
	>
		<div
			class="disclosure__panel-inner"
			data-module-bind="disclosure__panel-inner"
			itemprop="text"
		>
			<slot />
		</div>
	</div>
</li>

<style lang="scss">
	@use '@design-system-styles/tools/_a11y.scss';

	.disclosure__heading {
		--heading-font-size: var(--font-size-gamma);
		--heading-line-height: var(--line-height-gamma);
		font-weight: normal;
	}
	.disclosure__item,
	.disclosure__toggle {
		width: 100%;
	}

	.disclosure__toggle {
		display: flex;
		align-items: center;
		gap: var(--space-r-tiny);
		color: var(--color-accent-robijnrood);
		cursor: pointer;

		&:focus {
			@include a11y.focusring;
		}
	}

	.disclosure__show-inactive {
	}

	/**
	 * TODO: increased specificity by 0,1,0 to battle loading order issues in Astro
	 */
	.disclosure__show-active.disclosure__show-active {
		display: none;
	}

	.disclosure__panel {
		display: none;
	}

	.disclosure__panel-inner {
		padding-block-start: var(--space-r-small);
	}

	.disclosure__item.is-active {
		.disclosure__panel {
			display: block;
		}
		.disclosure__show-inactive {
			display: none;
		}
		.disclosure__show-active {
			display: block;
		}
	}

	.disclosure__item--accordeon {
		& + & {
			margin-block-start: var(--space-r-small);
		}
		.disclosure__panel-inner {
			padding-block: var(--space-r-large);
		}
		&:last-child {
			.disclosure__panel-inner {
				padding-block-end: 0;
			}
		}

		.disclosure__toggle--button {
			border-block-end-width: 2px;

			&:hover {
				--button-background-color: var(--color-poolblauw);
			}

			&:active {
				--button-border-color: var(--color-poolblauw);
			}

			:global(.e-icon) {
				transition: transform 0.3s;
			}

			&[aria-expanded='true'] {
				--button-background-color: var(--color-poolblauw);
				:global(.e-icon) {
					transform: rotate(180deg);
				}
			}
		}
	}
</style>
