---
import Layout from '../../layouts/Layout.astro';
import {
	availableLocales,
	Locale,
	prefixUrlWithlocale,
} from 'src/utilities/locale/translation';
import {
	getDataHome,
	getDataHomeByLocale,
	PageHomeProps,
} from 'src/utilities/api';
import { Hero } from '@design-system/components/Hero';
import { Layer } from '@design-system/components/Layout/Layer';
import { Retain } from '@design-system/components/Layout/Retain';
import { Stack } from '@design-system/components/Layout/Stack';
import { SectionHeadingGroup } from '@design-system/components/SectionHeadingGroup';
import { ContentBlock } from '@design-system/components/ContentBlock';
import { GridFluid } from '@design-system/components/Layout/Grid';
import { Button } from '@design-system/elements/Button';
import { ThemeOverview } from '@design-system/components/ThemeOverview';
import { stringToSlug } from 'src/utilities/stringToSlug';
import { Assistance } from '@design-system/components/Assistance';

export async function getStaticPaths() {
	const collection = await getDataHome();
	return collection.map((page: PageHomeProps) => ({
		params: {
			locale: page.localeID,
		},
		props: {
			pagesData: collection,
			locale: availableLocales.filter(
				(locale) => locale.id === page.localeID,
			)[0],
		},
	}));
}

interface Props {
	locale: Locale;
	pagesData?: PageHomeProps[];
}

const { locale, pagesData } = Astro.props;

// Get pagedata based on locale
const pageData: PageHomeProps = pagesData.filter(
	(page) => page.localeID === locale.id,
)[0];
---

<Layout
	locale={locale}
	metaData={pageData.metaData}
	skipPageSuffix
	mastheadHighlight
	alternativeTranslations={pageData.alternatives}
>
	<Hero
		title={pageData.hero.title}
		chapeau={pageData.hero.chapeau}
		image={pageData.hero.image}
		highlight
	/>

	<!-- {
		pageData.assistance && (
			<Layer id={stringToSlug(pageData.assistance.headline)}>
				<Retain>
					<Assistance feedback {...pageData.assistance} />
				</Retain>
			</Layer>
		)
	} -->
</Layout>

<style lang="scss">
	@use '@design-system-styles/primitives/_responsive.scss';

	.grid-important {
		--grid-fluid-min-item-size: 20rem; // 400px
		--grid-fluid-gap: var(--stack-small);
	}
</style>
