---
import { availableLocales, Locale } from 'src/utilities/locale/translation';

import Layout from '@layouts/Layout.astro';
import { Hero } from '@design-system/components/Hero';
import { getDataThemes, ThemePageProps } from 'src/utilities/api/theme';
import { UpdatedAt } from '@design-system/elements/UpdatedAt';
import { ContentBlock } from '@design-system/components/ContentBlock';
import { Layer } from '@design-system/components/Layout/Layer';
import { Retain } from '@design-system/components/Layout/Retain';
import { Heading } from '@design-system/elements/Heading';
import { Stack } from '@design-system/components/Layout/Stack';
import { Assistance } from '@design-system/components/Assistance';
import { TaleList } from '@design-system/components/Tale';
import { CTAButtonOverview } from '@modules/CTAButtonOverview';
import { stringToSlug } from 'src/utilities/stringToSlug';

export async function getStaticPaths() {
	const collection = await getDataThemes();
	return (
		collection
			// filter out unavailable locales
			.filter(
				(page: ThemePageProps) =>
					availableLocales.filter((locale) => locale.id === page.localeID)
						.length,
			)
			.map((page: ThemePageProps) => ({
				params: { theme: page.slug, locale: page.localeID },
				props: {
					pageData: page,
					locale: availableLocales.filter(
						(locale) => locale.id === page.localeID,
					)[0],
				},
			}))
	);
}

interface Props {
	pageData: ThemePageProps;
	locale: Locale;
}

const { pageData, locale } = Astro.props;

const filters = [];
const ctaButtons = [];

// Separate the categories from the ctaButtons
pageData.ctaButtonCollection.forEach((item) => {
	if (item._type === 'category') {
		const categorySlug = stringToSlug(item.title);
		// add category to filters array
		filters.push({ label: item.title, id: categorySlug });

		// loop over connected ctaButtons to add them to our ctabuttons array and
		item.ctaButtonCollection.forEach((button) => {
			// check if button is already present in our ctaButton array and store the index
			const foundButtonIndex = ctaButtons.findIndex(
				(ctaButton) => ctaButton._id === button._id,
			);

			if (foundButtonIndex < 0) {
				// add item to ctaButtons with category
				if (
					button.categories.findIndex((cat) => cat.slug === categorySlug) === -1
				) {
					button.categories.push({
						slug: categorySlug,
					});
				}
				ctaButtons.push(button);
			} else {
				// button is found, only update categories
				if (
					ctaButtons[foundButtonIndex].categories.findIndex(
						(cat) => cat.slug === categorySlug,
					) === -1
				) {
					ctaButtons[foundButtonIndex].categories.push({
						slug: categorySlug,
					});
				}
			}
		});
	} else if (item._type === 'cta-button-document') {
		ctaButtons.push(item);
	}
});
---

<Layout
	locale={locale}
	metaData={pageData.metaData}
	mastheadHighlight
	alternativeTranslations={pageData.alternatives}
	type={pageData.type}
>
	<Hero
		title={pageData.hero.title}
		titleSuffix={pageData.overview.title}
		image={pageData.hero.image}
		chapeau={pageData.hero.chapeau}
		updatedAt={pageData.hero.showUpdatedAt ? pageData.updatedAt : undefined}
		highlight
	>
		<UpdatedAt slot="prefix" time={pageData.updatedAt} />
		<ContentBlock value={pageData.hero.content} />
	</Hero>

	<Layer pullUpBy="hero" background="zebra" id="situaties">
		{
			ctaButtons?.filter((item) => item.label).length ? (
				<Retain>
					<Stack>
						<Heading>{pageData.titleFlow}</Heading>

						<CTAButtonOverview
							name={pageData.slug}
							categories={filters}
							items={ctaButtons}
							enableFilter
						/>
					</Stack>
				</Retain>
			) : null
		}
	</Layer>

	{
		pageData?.taleCollection?.length ? (
			<Layer background="zebra">
				<Retain>
					<TaleList taleCollection={pageData.taleCollection} />
				</Retain>
			</Layer>
		) : null
	}

	{
		pageData.assistance && (
			<Layer>
				<Retain>
					<Assistance feedback {...pageData.assistance} />
				</Retain>
			</Layer>
		)
	}
</Layout>
<style lang="scss">
	@use '@design-system-styles/primitives/_responsive.scss';

	.grid-questions {
		--grid-fluid-min-item-size: 20rem; // 400px
		--grid-fluid-gap: var(--stack-small);
	}
</style>
