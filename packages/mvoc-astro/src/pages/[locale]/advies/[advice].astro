---
import { addDays, subDays } from 'date-fns';
import { formatDate } from 'src/utilities/locale/date';
import {
	availableLocales,
	getLocaleFromURL,
} from 'src/utilities/locale/translation';
import {
	getDataSituationAdvice,
	PageSituationAdviceProps,
} from 'src/utilities/api';

import Layout from '@layouts/Layout.astro';
import { ContentBlock } from '@modules/ContentBlock';
import {
	CardAdvice,
	CardBlock,
	CardDay,
	CardPrivacy,
	Steps,
} from '@design-system/components/Card';
import { Stack } from '@design-system/components/Layout/Stack';
import { Retain } from '@design-system/components/Layout/Retain';
import { Hero } from '@design-system/components/Hero';
import { SiteSettingsProps, useSiteSettings } from 'src/utilities/api/queries';
import { UpdatedAt } from '@design-system/elements/UpdatedAt';
import { Advice } from '@design-system/components/Advice';
import { Layer } from '@design-system/components/Layout/Layer';
import { Sidebar } from '@design-system/components/Layout/Sidebar';
import { InformContacts } from '@design-system/components/InformContacts';
import { TipOverview } from '@design-system/components/Tips';
import { Heading } from '@design-system/elements/Heading';
import { Feedback } from '@design-system/components/Feedback';
import { getFeedbackUrl } from 'src/utilities/tracking/feedback';
import { Assistance } from '@design-system/components/Assistance';

export async function getStaticPaths() {
	function getShowOnDays(collection: { showOn: Array<number> }[]) {
		return collection && collection.filter(({ showOn }) => !!showOn).length
			? [...new Set([].concat(...collection.map((answer) => answer.showOn)))]
			: [0];
	}

	return await availableLocales.reduce(async (paths, locale) => {
		const { pages } = await getDataSituationAdvice({ locale });

		// loop over pages
		const newPaths = pages.map((page) => {
			// Get days to generate
			const answerShowOnDays = getShowOnDays(page.answer);
			const planShowOnDays = getShowOnDays(page?.advice.plan);
			// combine answer & plan days
			const daysToGenerate = [
				...new Set(answerShowOnDays.concat(planShowOnDays)),
			];

			return daysToGenerate.map((day) => ({
				params: {
					advice: `${page.slug}${day === 0 ? '' : `-dag-${day}`}`,
					locale: locale.id,
				},
				props: {
					pageData: page,
					pageDay: day,
				},
			}));
		});

		return [...(await paths), newPaths.flat()];
	}, Promise.resolve([]));
}

interface Props {
	pageData: PageSituationAdviceProps;
	pageDay: number;
}

const today = new Date();
const { pageData, pageDay } = Astro.props;
const locale = getLocaleFromURL(Astro.url.pathname);
const siteSettings: SiteSettingsProps = await useSiteSettings({ locale });

// Get most relevant answer
const answer = pageData?.answer
	? pageData.answer.filter(
			({ showOn }) => !showOn || showOn.includes(pageDay),
	  )[0] || pageData.answer[pageData.answer.length - 1]
	: null;

// Filter advice plan based on current day
const plan =
	pageData?.advice.plan &&
	pageData.advice.plan
		.filter(({ showOn }) => !showOn || showOn.includes(pageDay))
		.map(({ content, day: planDay, title }) => ({
			content,
			day: planDay,
			title,
			date:
				planDay === null || planDay === undefined
					? formatDate(today, locale.locale)
					: formatDate(
							planDay > pageDay
								? addDays(today, planDay - pageDay)
								: subDays(today, pageDay - planDay),
							locale.locale,
					  ),
		}));

const translatedTips = pageData.moreTips.tipCollection
	? pageData.moreTips.tipCollection.filter((tip) => tip.title)
	: [];

console.log(pageData.assistance);
---

<Layout locale={locale} metaData={pageData.metaData}>
	<Hero title={pageData.header.title} image={pageData.header.image}>
		<UpdatedAt slot="prefix" time={pageData.updatedAt} />
		{
			pageData.header.showSeriousSymptoms ? (
				<Advice
					title={siteSettings.severeSymptomsAdvice.title}
					subtitle={siteSettings.severeSymptomsAdvice.subtitle}
					icon={siteSettings.severeSymptomsAdvice.icon}
				/>
			) : null
		}
	</Hero>

	<Layer as="div">
		<Retain>
			<Sidebar>
				<Retain variant="text">
					<Stack gap="huge">
						{
							answer && (
								<CardAdvice title={answer.title}>
									<ContentBlock value={answer.content} />
								</CardAdvice>
							)
						}

						{
							!!plan?.length && (
								<section>
									<Stack gap="small">
										<h2>{pageData.advice.title}</h2>
										<Steps>
											{plan.map(({ date, title, content }) => {
												return (
													<CardDay title={title} day={date}>
														{content && <ContentBlock value={content} />}
													</CardDay>
												);
											})}
										</Steps>
									</Stack>
								</section>
							)
						}

						{
							!!pageData.advice?.cards?.length && (
								<section>
									<Stack gap="small">
										{pageData.advice.secondaryTitle ? (
											<h2>{pageData.advice.secondaryTitle}</h2>
										) : null}
										<div>
											<Stack gap="large">
												{pageData.advice.cards.map(
													({
														title,
														chapeau,
														content,
														buttons,
														tipCollection,
													}) => (
														<CardBlock
															title={title}
															chapeau={chapeau}
															buttons={buttons}
														>
															<ContentBlock value={content} />
															{tipCollection ? (
																<TipOverview
																	tipCollection={tipCollection.filter(
																		(tip) => tip.title,
																	)}
																/>
															) : null}
														</CardBlock>
													),
												)}
											</Stack>
										</div>
									</Stack>
								</section>
							)
						}

						{
							!!plan?.length && pageData.informContacts.title && (
								<InformContacts content={pageData.informContacts} />
							)
						}

						{
							translatedTips.length ? (
								<section>
									<Stack>
										<Heading level={2}>
											{pageData.moreTips.title
												? pageData.moreTips.title
												: siteSettings.moreTips}
										</Heading>
										<TipOverview tipCollection={translatedTips} />
									</Stack>
								</section>
							) : null
						}

						<Feedback
							name="Situatie Advies"
							url={getFeedbackUrl(siteSettings.feedback.url, {
								source: 'situation-advice',
								advice: pageData.slug,
								day: `${pageDay}`,
							})}
						/>
					</Stack>
				</Retain>

				<CardPrivacy slot="aside" />
			</Sidebar>
		</Retain>
	</Layer>

	{
		pageData.assistance && (
			<Layer background="ijsblauw">
				<Retain>
					<Assistance {...pageData.assistance} />
				</Retain>
			</Layer>
		)
	}
</Layout>
