---
import Layout from '../../../layouts/Layout.astro';
import { availableLocales, Locale } from 'src/utilities/locale/translation';
import { QuestionPageProps, getDataQuestionPages } from 'src/utilities/api';
import { Hero } from '@design-system/components/Hero';
import { Retain } from '@design-system/components/Layout/Retain';
import { ContentBlock } from '@design-system/components/ContentBlock';
import { Layer } from '@design-system/components/Layout/Layer';
import { getPageSubfolder } from 'src/utilities/helpers/page-subfolder';
import FormSwitch from '@modules/forms/situations/FormSwitch.astro';
import { Sidebar } from '@design-system/components/Layout/Sidebar';
import { CardPrivacy } from '@design-system/components/Card';
import { Breadcrumbs } from '@design-system/components/Breadrumbs';

export async function getStaticPaths() {
	const collection = await getDataQuestionPages();
	return (
		collection
			// filter out unavailable locales
			.filter(
				(page: QuestionPageProps) =>
					availableLocales.filter((locale) => locale.id === page.localeID)
						.length,
			)
			.map((page: QuestionPageProps) => ({
				params: {
					slug: getPageSubfolder(page),
					question: page.slug,
					locale: page.localeID,
				},
				props: {
					pageData: page,
					locale: availableLocales.filter(
						(locale) => locale.id === page.localeID,
					)[0],
				},
			}))
	);
}

interface Props {
	pageData: QuestionPageProps;
	locale: Locale;
}

const { pageData, locale } = Astro.props;
---

<Layout
	locale={locale}
	metaData={pageData.metaData}
	alternativeTranslations={pageData.alternatives}
	type={pageData.type}
>
	<Hero
		title={pageData.hero.title}
		chapeau={pageData.hero.chapeau}
		image={pageData.hero.image}
		updatedAt={pageData.hero.showUpdatedAt ? pageData.updatedAt : undefined}
		isPhoto={pageData.hero.isPhoto}
	>
		<Breadcrumbs breadcrumbs={pageData.breadcrumbs} slot="prefix" />
		<ContentBlock value={pageData.hero.content} />
	</Hero>
	<Layer>
		<Retain>
			<Sidebar>
				<Retain variant="text">
					<FormSwitch
						question={pageData.question}
						buttons={pageData.buttons}
						assistance={pageData.assistance}
						content={pageData.content}
					>
						<ContentBlock
							value={pageData.question.content}
							slot="after-label"
						/>
					</FormSwitch>
				</Retain>
				<CardPrivacy slot="aside" />
			</Sidebar>
		</Retain>
	</Layer>
</Layout>
