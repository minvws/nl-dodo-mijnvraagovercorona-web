---
import '@duetds/date-picker/dist/collection/themes/default.css';

import { GridFluid } from '@design-system/components/Layout/Grid';
import { Stack } from '@design-system/components/Layout/Stack';
import { Button } from '@design-system/elements/Button';
import { HTMLAttributes } from 'astro/types';
import {
	getDaySlug,
	getShowOnDays,
} from 'src/utilities/helpers/advice-helpers';
import { SiteSettingsProps, useSiteSettings } from 'src/utilities/api/queries';
import {
	getLocaleFromURL,
	prefixUrlWithlocale,
} from 'src/utilities/locale/translation';
import type { Props as SubmitProps } from './Submit.astro';
import Submit from './Submit.astro';
import { FieldWrapper } from '@design-system/components/Form';

interface Props extends HTMLAttributes<'form'> {
	buttons: SubmitProps['buttons'];
	label: string;
}

const { class: className, label, buttons, ...attrs } = Astro.props;
const locale = getLocaleFromURL(Astro.url.pathname);
const siteSettings: SiteSettingsProps = await useSiteSettings({ locale });

let daysToGenerate = [] as number[];
let standardSlug = '';

const parsedButtons = buttons?.map((button, index) => {
	if (index === 0 && button.standard) {
		const answerShowOnDays = getShowOnDays(button.next.answer);
		const planShowOnDays = getShowOnDays(button.next?.plan);
		daysToGenerate = [...new Set(answerShowOnDays.concat(planShowOnDays))];
		standardSlug = button.next.slug;
	}
	return index === 0 && button.standard
		? {
				...button,
				disabled: true,
		  }
		: {
				...button,
		  };
});
---

<form
	method="get"
	class={`c-answers-date${className ? ` | ${className}` : ''}`}
	{...attrs}
	data-module="answers-date"
	data-locale={locale.locale}
	data-max-days={daysToGenerate.length}
>
	<Stack>
		<FieldWrapper label={label} id="date">
			<duet-date-picker identifier="date">
				{
					daysToGenerate.length ? (
						<GridFluid data-module-bind="answers-date__alternative">
							{daysToGenerate.map((day, index) => (
								<Button
									href={prefixUrlWithlocale(
										getDaySlug({ slug: standardSlug, day }),
										locale,
									)}
									variant="tertiary"
									icon="chevron-small-right"
									data-day={
										day === 0 || index === daysToGenerate.length - 1
											? undefined
											: day
									}
									full
								>
									{day === 0
										? siteSettings.today
										: index === daysToGenerate.length - 1
										? `${siteSettings.moreThan} ${day - 1} ${
												siteSettings.dayPlural.that
										  } ${siteSettings.ago}`
										: day === 1
										? `${day} ${siteSettings.dayPlural.this} ${siteSettings.ago}`
										: `${day} ${siteSettings.dayPlural.that} ${siteSettings.ago}`}
								</Button>
							))}
						</GridFluid>
					) : null
				}
			</duet-date-picker>
		</FieldWrapper>

		<Submit buttons={parsedButtons} />
	</Stack>
</form>

<script>
	import { DuetDatePicker } from '@duetds/date-picker/custom-element';
	import { subDays, differenceInCalendarDays } from 'date-fns';
	import { getDaySlug } from 'src/utilities/helpers/advice-helpers';
	import { formatDate } from 'src/utilities/locale/date';
	import { adapter, datepickerTranslations } from './datepicker-helpers';

	const today = new Date();
	const parent = document.querySelector(
		'[data-module="answers-date"]',
	) as HTMLFormElement;

	if (parent) {
		const locale = parent.getAttribute('data-locale');
		const maxDays = parseInt(parent.getAttribute('data-max-days'));
		const submitButton = parent.querySelector(
			'button[type="submit"]',
		) as HTMLButtonElement;
		const alternativeWrapper = parent.querySelector(
			'[data-module-bind="answers-date__alternative"]',
		);
		const selectionButtons = alternativeWrapper.querySelectorAll('[data-day]');

		[...selectionButtons].forEach((button) => {
			const day = parseInt(button.getAttribute('data-day'));
			const inner = button.querySelector('[data-button-content]');
			inner.innerHTML = formatDate(subDays(today, day), locale);
		});

		// Initialise datepicker
		if ('customElements' in window) {
			let day = 0;
			alternativeWrapper.remove();

			const picker = document.querySelector('duet-date-picker');

			picker.setAttribute(
				'max',
				`${today.getFullYear()}-${`0${today.getMonth() + 1}`.slice(
					-2,
				)}-${`0${today.getDate()}`.slice(-2)}`,
			);

			customElements.define('duet-date-picker', DuetDatePicker);

			picker.dateAdapter = adapter;
			picker.localization = datepickerTranslations[locale];

			picker.addEventListener('duetChange', (event: any) => {
				const diff = differenceInCalendarDays(event.detail.valueAsDate, today);
				day = diff < 0 ? (Math.abs(diff) < maxDays ? diff : -(maxDays - 1)) : 0;
				diff < 1
					? (submitButton.disabled = false)
					: (submitButton.disabled = true);
			});

			parent.addEventListener('submit', (event) => {
				const formData = new FormData(parent);
				event.preventDefault();
				if (formData.get('date')) {
					const url = getDaySlug({
						slug: submitButton.getAttribute('formaction'),
						day: Math.abs(day),
					});
					(window as Window).location = url;
				}
			});
		}
	}
</script>

<style lang="scss" is:global>
	:root:root {
		--duet-font: inherit;
		--duet-color-border: var(--color-grijs-4);
		--duet-radius: var(--radii-milli);
		--duet-color-placeholder: var(--color-grijs-6);
		--duet-color-button: transparent;
		--duet-color-text: var(--color-black);
		--duet-color-primary: var(--color-hemelblauw);
	}

	.duet-date__toggle.duet-date__toggle {
		color: var(--color-diepblauw);
	}
</style>
