---
import { Icon as AstroIcon } from 'astro-icon/components';
import { type HTMLAttributes } from 'astro/types';
import {
	Retain,
	type MainNavigationProps,
	MainNavigation,
} from '@mvoc/ui/components';
import { ButtonTool, Icon } from '@mvoc/ui/elements';
import { getLocaleFromURL, useGlobalData } from '@mvoc/ui/helpers';

interface Props extends HTMLAttributes<'header'> {
	navigation?: {
		label: string;
		items: MainNavigationProps['items'];
	};
}

const { navigation, class: className, ...attrs } = Astro.props;
const locale = getLocaleFromURL(Astro.url.pathname);
const globalData = useGlobalData({ locale });
---

<header
	class={`c-masthead${className ? ` | ${className}` : ''}`}
	data-module="masthead"
	{...attrs}
>
	<div class="c-masthead__wrap">
		<div class="c-masthead__top" data-module-bind="masthead__top">
			<Retain class="c-masthead__top__inner">
				<div class="c-masthead__start">
					<slot name="start" />
				</div>

				<a class="c-masthead__logo" href={locale.urlPrefix}>
					<AstroIcon class="c-masthead__logo__visual" name="ro-logo" />
					<span class="u-visually-hidden">{globalData.logoAlt}</span>
				</a>

				<div class="c-masthead__end">
					<slot name="end" />
					{
						navigation?.label ? (
							<ButtonTool
								class="c-masthead__button"
								type="button"
								label={navigation.label}
								showLabel
								aria-expanded="false"
								aria-controls="nav-main"
								data-module-bind="masthead__button"
							>
								<Icon
									name="mobile"
									class="c-masthead__button-icon | expanded-hide"
								/>
								<Icon
									name="cross"
									class="c-masthead__button-icon | expanded-show"
								/>
							</ButtonTool>
						) : null
					}
				</div>
			</Retain>
		</div>
		{
			navigation?.items &&
			navigation.items.length &&
			globalData.mainNavigation.homeLabel &&
			globalData.mainNavigation.landmark ? (
				<MainNavigation items={navigation?.items} />
			) : null
		}
	</div>
</header>

<style lang="scss">
	@use '@mvoc/ui/styles/primitives/responsive';
	@use '@mvoc/ui/styles/tools/rem';

	.c-masthead {
		--masthead-inline-padding: var(--space-6);
		--masthead-logo-spacer: 0px;
		position: var(--masthead-position, absolute);
		z-index: var(--masthead-z-index, unset);
		inline-size: 100%;
		background-color: var(--masthead-background, var(--color-donkerblauw));

		@media (--mq-large) {
			--masthead-logo-spacer: var(--masthead-inline-padding);
		}

		@media (--mq-huge) {
			--masthead-position: relative;
			--masthead-z-index: 50;
			--masthead-block-size: auto;
			--masthead-template-areas: 'top top' 'drawer drawer';
			--masthead-background: var(--color-poolblauw);
		}
	}

	.c-masthead__wrap {
		display: grid;
		grid-template-areas: var(
			--masthead-template-areas,
			'top top' 'main drawer'
		);
		grid-template-rows:
			calc(var(--masthead-logo-block-size) + var(--masthead-logo-spacer))
			1fr;
		grid-template-columns: 1fr var(--theme-main-menu-open-size);
		block-size: var(--masthead-block-size, var(--body-block-size));
	}

	/**
	 * Top
	 */
	.c-masthead__top {
		position: relative;
		z-index: 3;
		grid-area: top;
		container: masthead-container / inline-size;

		.c-masthead--compact & {
			@media (--mq-large) and (--mq-huge-until) {
				box-shadow: var(--elevation-frost);
			}
		}
	}

	.c-masthead__top__inner {
		display: grid;
		gap: var(--space-4);
		grid-template-columns: 1fr auto 1fr;
	}

	// enable container query for embedded elements
	.c-masthead__start,
	.c-masthead__end {
		container: layout-container / inline-size;
	}

	.c-masthead__end {
		display: flex;
		flex-wrap: wrap;
		align-items: center;
		justify-content: end;
		row-gap: var(--space-1);
		column-gap: var(--space-4);

		:global(.c-button-tool__label) {
			display: none;
		}
	}

	/**
	 * Logo
	 */
	.c-masthead__logo {
		padding-block-end: var(--masthead-logo-spacer);

		&:focus {
			outline: var(--elevation-focusring);
			outline-offset: 2px;
		}
	}

	.c-masthead__logo__visual {
		display: block;
		block-size: var(--masthead-logo-block-size, #{rem.convert(80px)});
		inline-size: auto;
		aspect-ratio: 54 / 81;
	}

	/**
	 * Navigation
	 */
	.c-masthead__button {
		.expanded-show {
			display: none;
		}

		&[aria-expanded='true'] {
			--button-tool-color: var(--color-white);
			--button-tool-border-color: transparent;
			--button-tool-background-color: transparent;

			:global(.expanded-hide) {
				display: none;
			}
			:global(.expanded-show) {
				display: block;
			}
		}

		@media (--mq-huge) {
			--button-tool-display: none;
		}
	}

	/**
	 * Container queries
	 */
	@container masthead-container (inline-size > #{rem.convert(1024px)}) {
		.c-masthead__logo {
			--masthead-logo-block-size: #{rem.convert(102px)};
		}
	}

	@container layout-container (inline-size > #{rem.convert(140px)}) and (inline-size < #{rem.convert(192px)}) {
		.c-masthead__end {
			:global(> :last-child) {
				:global(.c-button-tool__label) {
					display: block;
				}
			}
		}
	}

	@container layout-container (inline-size > #{rem.convert(192px)}) {
		.c-masthead__end {
			:global(.c-button-tool__label) {
				display: block;
			}
		}
	}
</style>

<script>
	import {
		debounce,
		getKeyboardFocusableElements,
		trapFocus,
	} from '@mvoc/ui/helpers';
	import { mqHuge } from '@mvoc/ui/primitives';

	const mastheadElement = document.querySelector('[data-module="masthead"]');
	if (mastheadElement) {
		const topElement = mastheadElement.querySelector(
			'[data-module-bind="masthead__top"]',
		) as HTMLElement;
		const menuButtonElement = mastheadElement.querySelector(
			'[data-module-bind="masthead__button"]',
		);
		const navElement = mastheadElement.querySelector(
			'[data-module="nav-main"]',
		);
		const mainElement = document.querySelector('main') as HTMLElement;

		// Store masthead spacing in a variable which can be used by other modules
		if (topElement) {
			const checkSize = () => {
				const mastheadRect = mastheadElement.getBoundingClientRect();
				const mastheadTopRect = topElement.getBoundingClientRect();
				document.documentElement.style.setProperty(
					'--theme__masthead-block-size',
					`${mastheadRect.height}px`,
				);
				document.documentElement.style.setProperty(
					'--theme__masthead-top-block-size',
					`${mastheadTopRect.height}px`,
				);
			};

			window.addEventListener('resize', checkSize);

			checkSize();
		}

		if (menuButtonElement && mainElement) {
			const trapFocusBind = trapFocus.bind(null, mastheadElement);
			const navElementFocusableElements =
				getKeyboardFocusableElements(navElement);

			const toggleFocusable = () => {
				const isExpanded =
					menuButtonElement.getAttribute('aria-expanded') === 'true';
				navElementFocusableElements.forEach((element) => {
					if (isExpanded || window.matchMedia(mqHuge).matches) {
						element.removeAttribute('tabindex');
					} else {
						element.setAttribute('tabindex', '-1');
					}
				});
			};

			const toggleMenu = (event: Event) => {
				event.preventDefault();
				const isExpanded =
					menuButtonElement.getAttribute('aria-expanded') === 'true';

				menuButtonElement.setAttribute(
					'aria-expanded',
					new Boolean(!isExpanded).toString(),
				);
				document.documentElement.classList.toggle('has-open-menu', !isExpanded);

				if (isExpanded) {
					// close menu
					document.removeEventListener('keydown', trapFocusBind, false);
					toggleFocusable();
				} else {
					// open menu
					document.addEventListener('keydown', trapFocusBind, false);
					toggleFocusable();
				}
			};

			menuButtonElement.addEventListener('click', toggleMenu);
			mainElement.addEventListener('click', (event) => {
				const isExpanded =
					menuButtonElement.getAttribute('aria-expanded') === 'true';
				if (isExpanded) {
					toggleMenu(event);
				}
			});

			// By default the navelement elements are not focusable
			window.addEventListener('resize', debounce(toggleFocusable));
			toggleFocusable();
		}
	}
</script>
