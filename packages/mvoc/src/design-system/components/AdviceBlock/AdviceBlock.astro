---
import type { HTMLAttributes } from 'astro/types';
import { Card } from '@mvoc/ui/components';
import { Media } from '@mvoc/ui/components';
import type { ContentBlockProps } from '@design-system/components/ContentBlock';
import { ContentBlock } from '@design-system/components/ContentBlock';
import { Stack } from '@mvoc/ui/components';
import type { ButtonProps } from 'src/utilities/api/queries/buttons';
import { Disclosure } from '@mvoc/ui/components';
import { FlexibleButton } from '@modules/elements/FlexibleButton';
import type { PictureProps } from 'src/utilities/api/queries';
import { stringToSlug } from 'src/utilities/stringToSlug';

interface Props extends HTMLAttributes<'div'> {
	title: string;
	image?: PictureProps['image'];
	content: ContentBlockProps['value'];
	button?: ButtonProps;
	items?: {
		image?: PictureProps['image'];
		content: ContentBlockProps['value'];
	}[];
}

const { title, image, content, button, items } = Astro.props;
---

<Card variant="filled" class="c-advice-block">
	<Stack gap={4}>
		<Disclosure
			headingLevel={3}
			label={title}
			id={stringToSlug(title)}
			accordeon
			adviceBlock
			itemscope
			itemprop="mainEntity"
			itemtype="https://schema.org/Question"
			image={image}
		>
			<Stack gap={8}>
				<ContentBlock value={content} />
				{
					items.map((item) => (
						<Media image={item.image} class="c-advice-block__media-item">
							<ContentBlock value={item.content} />
						</Media>
					))
				}
				{
					button?.label ? (
						<FlexibleButton {...button} interactionIconAnimation="swing" />
					) : null
				}
			</Stack>
		</Disclosure>
	</Stack>
</Card>

<style lang="scss">
	@use '@mvoc/ui/styles/primitives/responsive';

	/**
	 * 1. override specificity by 0,1,0 to battle Astro loading
	 */
	.c-advice-block.c-advice-block {
		--card-border-width: var(--space-1);
		--card-border-color: var(--color-accent-grasgroen);
		padding: 0;
		border-block-start: 0;
		border-block-end: 0;
		border-inline-end: 0;
		border-radius: var(--space-1);

		&:nth-of-type(even) {
			--card-border-color: var(--color-accent-robijnrood);
		}
		@media (--mq-large) {
			:global(.disclosure__item--accordeon .disclosure__panel-inner) {
				padding-block-start: 0;
			}
		}
	}

	.c-advice-block__media-item {
		@media (--mq-large) {
			margin-inline-start: var(--space-3);
		}
	}
</style>
