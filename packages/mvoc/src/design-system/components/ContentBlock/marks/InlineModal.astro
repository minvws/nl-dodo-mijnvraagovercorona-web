---
import { Mark } from 'astro-portabletext/components';
import { Modal } from '@mvoc/ui/components';
import { Link } from '@mvoc/ui/elements';
import type { ImageProps } from 'src/utilities/api/queries';
import type { SiteSettingsProps } from 'src/utilities/api/queries';
import { useSiteSettings } from 'src/utilities/api/queries';
import type { ContentBlockProps } from '..';
import ContentBlock from '../ContentBlock.astro';
import { Stack } from '@mvoc/ui/components';
import { getLocaleFromURL } from 'src/utilities/locale/translation';

type Props = Parameters<typeof Mark>[0];

interface DialogProps {
	children: ContentBlockProps['value'];
	mark: {
		_key: string;
		title: string;
		image: ImageProps;
		content: ContentBlockProps['value'];
	};
}

const props = Astro.props;

const locale = getLocaleFromURL(Astro.url.pathname);
const siteSettings: SiteSettingsProps = await useSiteSettings({ locale });

const { children, mark } = {
	children: props.node.children,
	mark: props.node.markDef,
} as DialogProps;
---

<Link
	id={`inline-modal-${mark._key}`}
	variant="tooltip"
	hiddenLabel={siteSettings.accessibility.labelModal}
>
	<ContentBlock value={children} />
</Link>

<Modal
	id={`inline-modal-${mark._key}`}
	title={mark.title}
	labelClose={siteSettings.genericLabels.close}
>
	<Stack>
		{
			mark.image?.src ? (
				<img src={mark.image.src} alt="" loading="lazy" />
			) : null
		}
		<ContentBlock value={mark.content} />
	</Stack>
</Modal>
