---
import Layout from '../../layouts/Layout.astro';
import type { Locale } from 'src/utilities/locale/translation';
import { availableLocales } from 'src/utilities/locale/translation';
import type { PageHomeProps } from 'src/utilities/api';
import { getDataHome } from 'src/utilities/api';
import { Hero } from '@design-system/components/Hero';
import { Layer } from '@design-system/components/Layout/Layer';
import { Retain } from '@design-system/components/Layout/Retain';
import { Stack } from '@design-system/components/Layout/Stack';
import { SectionHeadingGroup } from '@design-system/components/SectionHeadingGroup';
import { ContentBlock } from '@design-system/components/ContentBlock';
import { GridFluid } from '@design-system/components/Layout/Grid';
import { stringToSlug } from 'src/utilities/stringToSlug';
import { Assistance } from '@design-system/components/Assistance';
import { AdviceBlock } from '@design-system/components/AdviceBlock';
import { TaleList } from '@design-system/components/Tale';
import { CTAButtonOverview } from '@modules/CTAButtonOverview';
import { CardAnswerOverview } from '@modules/CardAnswerOverview';
import { getFiltersAndSituations } from 'src/utilities/api/queries/ctaButton';
import { FlexibleButton } from '@modules/elements/FlexibleButton';
import { MoreInfoOverview } from '@design-system/components/MoreInfo';
import { Heading } from '@mvoc/ui/elements';
import { Card } from '@design-system/components/Card';
import { getFeedbackUrl } from 'src/utilities/tracking/feedback';
import {
	useSiteSettings,
	type SiteSettingsProps,
} from 'src/utilities/api/queries';
import { Feedback } from '@design-system/components/Feedback';

export async function getStaticPaths() {
	const collection = await getDataHome();
	return (
		collection
			// filter out unavailable locales
			.filter(
				(page: PageHomeProps) =>
					availableLocales.filter((locale) => locale.id === page.localeID)
						.length,
			)
			.map((page: PageHomeProps) => ({
				params: {
					locale: page.localeID,
				},
				props: {
					pagesData: collection,
					locale: availableLocales.filter(
						(locale) => locale.id === page.localeID,
					)[0],
				},
			}))
			.flat(Infinity)
	);
}

interface Props {
	locale: Locale;
	pagesData?: PageHomeProps[];
}

const { locale, pagesData } = Astro.props;

// Get pagedata based on locale
const pageData: PageHomeProps = pagesData.filter(
	(page) => page.localeID === locale.id,
)[0];

const { filters, ctaButtons } = getFiltersAndSituations({
	ctaButtonCollection: pageData.important.ctaButtonCollection,
});

const siteSettings: SiteSettingsProps = await useSiteSettings({ locale });
---

<Layout
	locale={locale}
	metaData={pageData.metaData}
	skipPageSuffix
	mastheadHighlight
	alternativeTranslations={pageData.alternatives}
	type={pageData.type}
>
	<Hero
		title={pageData.hero.title}
		chapeau={pageData.hero.chapeau}
		image={pageData.hero.image}
		updatedAt={pageData.hero.showUpdatedAt ? pageData.updatedAt : undefined}
		highlight
		cards={!!pageData?.cards?.items}
		isPhoto={pageData.hero.isPhoto}
	>
		<ContentBlock value={pageData.hero.content} />
		{
			pageData?.button?.label ? (
				<FlexibleButton {...pageData.button} interactionIconAnimation="swing" />
			) : null
		}
	</Hero>

	{
		pageData?.cards?.label && !!pageData?.cards?.items && (
			<CardAnswerOverview label={pageData.cards.label} cards={pageData.cards} />
		)
	}

	{
		pageData?.important?.title ? (
			<Layer
				pullUpBy={pageData?.cards?.items ? undefined : 'hero'}
				id={stringToSlug(pageData.important.title)}
			>
				<Retain>
					<Stack gap={8}>
						<SectionHeadingGroup
							title={pageData.important.title}
							icon={pageData.important.icon}
						>
							<ContentBlock value={pageData.important.content} />
						</SectionHeadingGroup>
						<CTAButtonOverview
							name="homepage"
							categories={filters}
							items={ctaButtons}
							enableFilter={pageData.important.filter}
						/>
					</Stack>
				</Retain>
			</Layer>
		) : null
	}

	{
		pageData?.moreInfo?.items?.length ? (
			<Layer
				id={
					pageData?.moreInfo?.title
						? stringToSlug(pageData.moreInfo.title)
						: undefined
				}
				data-pagefind-ignore="all"
			>
				<Retain>
					<section>
						<Stack>
							{pageData?.moreInfo?.title ? (
								<Heading level={2}>{pageData.moreInfo.title}</Heading>
							) : null}
							<Card variant="filled">
								<MoreInfoOverview items={pageData.moreInfo.items} />
							</Card>
						</Stack>
					</section>
				</Retain>
			</Layer>
		) : null
	}

	{
		pageData?.taleCollection?.length ? (
			<Layer>
				<Retain>
					<TaleList taleCollection={pageData.taleCollection} />
				</Retain>
			</Layer>
		) : null
	}

	<Layer id={stringToSlug(pageData.currentAdvice.title)}>
		<Retain>
			<Stack gap={8}>
				<SectionHeadingGroup title={pageData.currentAdvice.title}>
					<ContentBlock value={pageData.currentAdvice.content} />
				</SectionHeadingGroup>
				<GridFluid class="grid-advice">
					{
						pageData.currentAdvice.adviceYes ? (
							<AdviceBlock {...pageData.currentAdvice.adviceYes} />
						) : null
					}
					{
						pageData.currentAdvice.adviceNo ? (
							<AdviceBlock {...pageData.currentAdvice.adviceNo} />
						) : null
					}
				</GridFluid>
			</Stack>
		</Retain>
	</Layer>

	{
		pageData?.showFeedback ? (
			<Layer>
				<Retain>
					<Stack>
						<Feedback
							name="Home"
							url={getFeedbackUrl(siteSettings.feedback.url, {
								source: pageData.type,
								advice: pageData.slug,
							})}
						/>
					</Stack>
				</Retain>
			</Layer>
		) : null
	}

	{
		pageData.assistance && pageData.assistance.type === 'assistance-new' ? (
			<Layer
				id={stringToSlug(pageData.assistance.title)}
				background="ijsblauw"
				pushDownBy="assistance-image"
			>
				<Retain>
					<Assistance
						feedback={getFeedbackUrl(siteSettings.feedback.url, {
							source: pageData.type,
							advice: pageData.slug,
						})}
						{...pageData.assistance}
					/>
				</Retain>
			</Layer>
		) : null
	}
</Layout>

<style lang="scss">
	.grid-advice {
		--grid-fluid-min-item-size: var(--space-100);
		--grid-fluid-gap: var(--stack-4);

		align-items: start;
	}
</style>
