---
import Layout from '../../layouts/Layout.astro';
import {
	availableLocales,
	Locale,
	prefixUrlWithlocale,
} from 'src/utilities/locale/translation';
import { getDataHome, PageHomeProps } from 'src/utilities/api';
import { Hero } from '@design-system/components/Hero';
import { Layer } from '@design-system/components/Layout/Layer';
import { Retain } from '@design-system/components/Layout/Retain';
import { Stack } from '@design-system/components/Layout/Stack';
import { SectionHeadingGroup } from '@design-system/components/SectionHeadingGroup';
import { ContentBlock } from '@design-system/components/ContentBlock';
import { GridFluid } from '@design-system/components/Layout/Grid';
import { Button } from '@design-system/elements/Button';
import { ThemeOverview } from '@design-system/components/ThemeOverview';
import { stringToSlug } from 'src/utilities/stringToSlug';
import { Assistance } from '@design-system/components/Assistance';
import { Card } from '@design-system/components/Card';
import { Heading } from '@design-system/elements/Heading';

export async function getStaticPaths() {
	const collection = await getDataHome();
	return collection.map((page: PageHomeProps) => ({
		params: {
			locale: page.localeID,
		},
		props: {
			pagesData: collection,
			locale: availableLocales.filter(
				(locale) => locale.id === page.localeID,
			)[0],
		},
	}));
}

interface Props {
	locale: Locale;
	pagesData?: PageHomeProps[];
}

const { locale, pagesData } = Astro.props;

// Get pagedata based on locale
const pageData: PageHomeProps = pagesData.filter(
	(page) => page.localeID === locale.id,
)[0];
---

<Layout
	locale={locale}
	metaData={pageData.metaData}
	skipPageSuffix
	mastheadHighlight
	alternativeTranslations={pageData.alternatives}
>
	<Hero
		title={pageData.hero.title}
		chapeau={pageData.hero.chapeau}
		image={pageData.hero.image}
		highlight
	>
		<ContentBlock value={pageData.hero.content} />
		<Button
			iconPosition="trailing"
			variant={'secondary'}
			icon={pageData.button.icon}
			href={prefixUrlWithlocale(`/${pageData.button.href}`, locale)}
		>
			{pageData.button.label}
		</Button>
	</Hero>
	<Layer pullUpBy="layer" background="ijsblauw">
		<Retain>
			<Stack gap="huge">
				<SectionHeadingGroup title={pageData.currentAdvice.title}>
					{pageData.currentAdvice.subTitle}
				</SectionHeadingGroup>
				<GridFluid class="grid-important">
					<Card variant="filled">
						<Heading>{pageData.currentAdvice.adviceYes.title}</Heading>
						<span>
							{pageData.currentAdvice.adviceYes.subTitle}
						</span>
						<ul>
							{
								pageData.currentAdvice.adviceYes.items
									?.filter((item) => item.label)
									.map((item) => <li>{item.label}</li>)
							}
						</ul>
					</Card>
					<Card variant="filled">
						<Heading>{pageData.currentAdvice.adviceNo.title}</Heading>
						<span>
							{pageData.currentAdvice.adviceNo.subTitle}
						</span>
						<ul>
							{
								pageData.currentAdvice.adviceNo.items
									?.filter((item) => item.label)
									.map((item) => <li>{item.label}</li>)
							}
						</ul>
						<Button
							variant="tertiary"
							href={pageData.currentAdvice.adviceNo.button.href}
							icon="chevron-small-right"
							interactionIconAnimation="swing"
						>
							{pageData.currentAdvice.adviceNo.button.label}
						</Button>
					</Card>
				</GridFluid>
			</Stack>
		</Retain>
	</Layer>

	<Layer pullUpBy="hero" id={stringToSlug(pageData.important.title)}>
		<Retain>
			<Stack gap="huge">
				<SectionHeadingGroup
					title={pageData.important.title}
					icon={pageData.important.icon}
				>
					<ContentBlock value={pageData.important.content} />
				</SectionHeadingGroup>
				<GridFluid class="grid-important">
					{
						pageData.important.questionCollection
							?.filter((item) => item.label)
							.map((item) => (
								<Button
									variant="tertiary"
									href={prefixUrlWithlocale(`/${item.path}`, locale)}
									icon="chevron-small-right"
									interactionIconAnimation="swing"
								>
									<ContentBlock value={item.label} />
								</Button>
							))
					}
				</GridFluid>
			</Stack>
		</Retain>
	</Layer>

	<!-- Assistance block.
		TO DO:
		- assistannce block
	-->

	<!-- {
		pageData.assistance && (
			<Layer id={stringToSlug(pageData.assistance.headline)}>
				<Retain>
					<Assistance feedback {...pageData.assistance} />
				</Retain>
			</Layer>
		)
	} -->
</Layout>

<style lang="scss">
	@use '@design-system-styles/primitives/_responsive.scss';

	.grid-important {
		--grid-fluid-min-item-size: 20rem; // 400px
		--grid-fluid-gap: var(--stack-small);
	}
</style>
