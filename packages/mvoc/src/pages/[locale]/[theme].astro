---
import {
	availableLocales,
	Locale,
	prefixUrlWithlocale,
} from 'src/utilities/locale/translation';

import Layout from '@layouts/Layout.astro';
import { Hero } from '@design-system/components/Hero';
import { SiteSettingsProps, useSiteSettings } from 'src/utilities/api/queries';
import { getDataThemes, ThemePageProps } from 'src/utilities/api/theme';
import { UpdatedAt } from '@design-system/elements/UpdatedAt';
import { ContentBlock } from '@design-system/components/ContentBlock';
import { Layer } from '@design-system/components/Layout/Layer';
import { Retain } from '@design-system/components/Layout/Retain';
import { Heading } from '@design-system/elements/Heading';
import { Button } from '@design-system/elements/Button';
import { GridFluid } from '@design-system/components/Layout/Grid';
import { Stack } from '@design-system/components/Layout/Stack';
import { Story } from '@design-system/components/Story';
import { Assistance } from '@design-system/components/Assistance';
import { TaleList } from '@design-system/components/Tale';

export async function getStaticPaths() {
	const collection = await getDataThemes();
	return (
		collection
			// filter out unavailable locales
			.filter(
				(page: ThemePageProps) =>
					availableLocales.filter((locale) => locale.id === page.localeID)
						.length,
			)
			.map((page: ThemePageProps) => ({
				params: { theme: page.slug, locale: page.localeID },
				props: {
					pageData: page,
					locale: availableLocales.filter(
						(locale) => locale.id === page.localeID,
					)[0],
				},
			}))
	);
}

interface Props {
	pageData: ThemePageProps;
	locale: Locale;
}

const { pageData, locale } = Astro.props;
const siteSettings: SiteSettingsProps = await useSiteSettings({ locale });
---

<Layout
	locale={locale}
	metaData={pageData.metaData}
	mastheadHighlight
	alternativeTranslations={pageData.alternatives}
>
	<Hero
		title={pageData.hero.title}
		image={pageData.hero.image}
		chapeau={pageData.hero.chapeau}
		highlight
	>
		<UpdatedAt slot="prefix" time={pageData.updatedAt} />
		<ContentBlock value={pageData.hero.content} />
	</Hero>
	<Layer
		pullUpBy="hero"
		background={pageData.taleCollection.length > 0 ? 'ijsblauw' : undefined}
		id="situaties"
	>
		{
			pageData?.questionCollection?.filter((item) => item.label).length ? (
				<Retain>
					<Stack>
						<Heading>
							{pageData.questionCollection.length > 1
								? `${pageData.questionCollection.length} ${siteSettings.situationPlural.that}`
								: `${pageData.questionCollection.length} ${siteSettings.situationPlural.this}`}{' '}
							{pageData.titleFlow}
						</Heading>

						<GridFluid class="grid-questions">
							{pageData.questionCollection
								?.filter((item) => item.label)
								.map((item) => (
									<Button
										variant="tertiary"
										href={prefixUrlWithlocale(item.href, locale)}
										icon="chevron-small-right"
										interactionIconAnimation="swing"
									>
										<ContentBlock value={item.label} />
									</Button>
								))}
						</GridFluid>
					</Stack>
				</Retain>
			) : null
		}
		{
			pageData?.taleCollection?.length ? (
				<Layer>
					<Retain>
						<TaleList taleCollection={pageData.taleCollection} />
					</Retain>
				</Layer>
			) : null
		}
		{
			pageData.assistance && (
				<Layer>
					<Retain>
						<Assistance feedback {...pageData.assistance} />
					</Retain>
				</Layer>
			)
		}
	</Layer>

	<style lang="scss">
		@use '@design-system-styles/primitives/_responsive.scss';

		.grid-questions {
			--grid-fluid-min-item-size: 20rem; // 400px
			--grid-fluid-gap: var(--stack-small);
		}
	</style>
</Layout>
