---
import { HTMLAttributes } from 'astro/types';
import { Icon, IconProps } from '@design-system/elements/Icon';
import { Animations } from '@design-system/primitives/animation';
import { ButtonVariants } from './';
import { isExternalUrl } from 'src/utilities/helpers/external-url';

// Interfaces
interface Shared {
	variant?: ButtonVariants;
	icon?: IconProps['name'];
	iconPosition?: 'leading' | 'trailing';
	interactionIconAnimation?: Animations;
	full?: boolean;
}

interface Button extends HTMLAttributes<'button'>, Shared {}

interface Link extends HTMLAttributes<'a'>, Shared {
	disabled?: boolean;
	hiddenLabel?: string;
}

type Props = Button | Link;

const {
	disabled,
	variant,
	hiddenLabel,
	icon,
	iconPosition,
	interactionIconAnimation,
	full,
	class: className,
	type,

	...attrs
} = Astro.props;

// Which element should we render?
const Element = attrs.href || attrs.href === '' ? 'a' : 'button';

// Create class based on props
const combinedClasses = `e-button${variant ? ` e-button--${variant}` : ''}${
	full ? ` e-button--full` : ''
}${
	interactionIconAnimation
		? ` | u-animation-interaction--${interactionIconAnimation}`
		: ''
}${className ? ` | ${className}` : ''}`;

const iconPositionCalculated =
	iconPosition === 'leading' ? 'leading' : 'trailing';

const isExternal = attrs.href && isExternalUrl(attrs.href);

const selectedIcon =
	attrs.href && isExternal ? 'external' : icon ? icon : undefined;
---

<Element
	class={combinedClasses}
	type={!attrs.href ? (type ? (type as Button['type']) : 'button') : undefined}
	disabled={!attrs.href && disabled ? disabled : undefined}
	data-disabled={attrs.href && disabled ? disabled : undefined}
	formaction={!attrs.href && attrs.formaction ? attrs.formaction : undefined}
	href={attrs.href}
	target={attrs.href && isExternal ? '_blank' : undefined}
	rel={attrs.href && isExternal ? 'noopener noreferrer' : undefined}
	lang={attrs.href ? attrs.lang : undefined}
	hreflang={attrs.href ? attrs.lang : undefined}
	{...attrs}
>
	{
		iconPositionCalculated === 'leading' && selectedIcon ? (
			<Icon
				class="e-button__icon--leading"
				name={selectedIcon}
				description={hiddenLabel}
			/>
		) : null
	}
	<span class="e-button__label" data-button-content>
		<slot />
	</span>
	{
		iconPositionCalculated === 'trailing' && selectedIcon ? (
			<Icon
				class="e-button__icon--trailing"
				name={selectedIcon}
				description={hiddenLabel}
			/>
		) : null
	}
</Element>

<style lang="scss">
	@use '@design-system-styles/primitives/_responsive.scss';
	@use '@design-system-styles/tools/_a11y.scss';

	.e-button {
		--button-border-size: 1px;
		--button-border-color: transparent;
		--button-border-elevation-color: transparent;
		--button-elevation-color: var(--color-accent-wijnrood);
		--button-elevation-size: 4px;
		--button-padding: var(--space-r-small);
		--button-padding-block: var(--button-padding);
		--button-padding-inline: var(--button-padding);
		--button-border-radius: var(--radii-milli);
		--button-background-color: var(--color-accent-robijnrood);
		--button-color: var(--color-white);
		--button-icon-color: currentColor;
		--button-inset-color: var(--color-accent-wijnrood);

		position: relative;
		display: inline-flex;
		align-items: center;
		gap: var(--space-r-small);
		min-inline-size: 100%;
		padding-block: calc(
			var(--button-padding-block) - var(--button-border-size)
		);
		padding-inline: calc(
			var(--button-padding-inline) - var(--button-border-size)
		);
		border: var(--button-border-size) solid var(--button-border-color);
		border-radius: var(--button-border-radius);
		text-align: center;
		text-decoration: none;
		background-color: var(--button-background-color);
		color: var(--button-color);
		cursor: pointer;

		&,
		&::after {
			transition-property: background-color, color, border, box-shadow;
			transition-duration: 200ms;
			transition-timing-function: ease-in-out;
		}

		&::after {
			position: absolute;
			border-radius: var(--button-border-radius);
			inset: calc(var(--button-border-size) * -1);
			content: '';
			box-shadow: inset 0 calc(var(--button-elevation-size) * -1) 0
				var(--button-elevation-color);
			pointer-events: none;
		}

		&[hidden] {
			display: none;
		}

		:global(> .e-icon) {
			color: var(--button-icon-color);
			animation: var(--u-animation-subscribe);
		}

		&:hover {
			--button-background-color: var(--color-accent-violet);
			--button-elevation-color: var(--color-accent-dieprood);
		}

		&:active {
			--button-elevation-size: 0px;
		}

		&:focus {
			@include a11y.focusring;
		}

		&:disabled,
		&[data-disabled] {
			--button-background-color: var(--color-grijs-4);
			--button-border-color: var(--color-grijs-4);
			--button-elevation-color: var(--color-grijs-5);
			cursor: not-allowed;
		}

		@media --mq-large {
			& {
				min-inline-size: auto;
			}
		}
	}

	.e-button__label {
		word-wrap: break-word;
		hyphens: auto;
		&:first-letter {
			text-transform: uppercase;
		}
	}

	.e-button__icon--trailing {
		margin-inline-start: auto;
	}

	// variants
	.e-button--secondary {
		--button-background-color: var(--color-donkerblauw);
		--button-elevation-color: var(--color-diepblauw);

		&:hover {
			--button-background-color: var(--color-diepblauw);
			--button-elevation-color: var(--color-nachtblauw);
		}

		&:active {
			--button-elevation-size: 0px;
		}
	}

	.e-button--tertiary,
	.e-button--quaternary {
		--button-color: var(--color-donkerblauw);
		--button-border-color: var(--variant--tile-border-color);
		--button-elevation-color: var(--button-border-color);
		--button-border-size: 1px;
		text-align: left;

		&:hover {
			--button-border-color: var(--variant--tile-border-color-interactive);
			--button-elevation-color: var(--button-border-color);
		}
	}

	.e-button--tertiary {
		&,
		&:hover,
		&:focus {
			--button-background-color: var(--color-white);
		}
	}

	.e-button--quaternary {
		&,
		&:hover,
		&:focus {
			--button-background-color: var(--color-ijsblauw);
		}
		--button-icon-color: var(--color-accent-robijnrood);
		font-weight: bold;
	}

	.e-button--quinary {
		--button-background-color: var(--color-white);
		--button-color: var(--color-donkerblauw);
		--button-border-color: var(--color-donkerblauw);
		--button-padding-block: var(--space-r-milli);
		--button-elevation-size: 0px;
		--button-border-radius: calc(
			var(--button-padding-block) * 2 + var(--font-lineheight-root) * 1em
		);

		&:hover {
			--button-background-color: var(--color-poolblauw);
			--button-border-color: var(--color-donkerblauw);
		}

		&.is-active {
			--button-background-color: var(--color-donkerblauw);
			--button-color: var(--color-white);
			--button-border-color: transparent;
			--button-elevation-size: 4px;
			--button-elevation-color: var(--color-nachtblauw);
		}
	}

	.e-button--full {
		inline-size: 100%;
	}
</style>
