---
import { availableLocales, Locale } from 'src/utilities/locale/translation';

import Layout from '@layouts/Layout.astro';
import { Hero } from '@design-system/components/Hero';
import {
	SiteSettingsProps,
	useSiteSettings,
} from 'src/utilities/api/queries/siteSettings';
import { getDataThemes, ThemePageProps } from 'src/utilities/api/theme';
import { UpdatedAt } from '@design-system/elements/UpdatedAt';
import { ContentBlock } from '@design-system/components/ContentBlock';
import { Layer } from '@design-system/components/Layout/Layer';
import { Retain } from '@design-system/components/Layout/Retain';
import { Heading } from '@design-system/elements/Heading';
import { Stack } from '@design-system/components/Layout/Stack';
import { Assistance } from '@design-system/components/Assistance';
import { TaleList } from '@design-system/components/Tale';
import { CTAButtonOverview } from '@modules/CTAButtonOverview';
import { stringToSlug } from 'src/utilities/stringToSlug';

export async function getStaticPaths() {
	const collection = await getDataThemes();
	return (
		collection
			// filter out unavailable locales
			.filter(
				(page: ThemePageProps) =>
					availableLocales.filter((locale) => locale.id === page.localeID)
						.length,
			)
			.map((page: ThemePageProps) => ({
				params: { theme: page.slug, locale: page.localeID },
				props: {
					pageData: page,
					locale: availableLocales.filter(
						(locale) => locale.id === page.localeID,
					)[0],
				},
			}))
	);
}

interface Props {
	pageData: ThemePageProps;
	locale: Locale;
}

const { pageData, locale } = Astro.props;
const siteSettings: SiteSettingsProps = await useSiteSettings({ locale });

const filters = [];
let ctaButtons = [];

console.log(pageData.ctaButtonCollection);

pageData.ctaButtonCollection.forEach((item) => {
	if (item._type === 'category') {
		filters.push({ label: item.title, id: stringToSlug(item.title) });

		item.ctaButtonCollection.forEach((button) => {
			const foundItem = ctaButtons.filter(
				(ctaButton) =>
					ctaButton.slugCollection.slug === button.slugCollection.slug,
			);
			console.log('foundItem', foundItem);

			if (!foundItem) {
				// add item to ctaButtons with category
				ctaButtons.push({
					...button,
					categories: [{ slug: stringToSlug(item.title) }],
				});
			} else {
				ctaButtons = ctaButtons.map((ctaButton) => {
					if (
						foundItem[0].slugCollection.slug === ctaButton.slugCollection.slug
					) {
						ctaButton.categories.push(stringToSlug(item.title));
					}
					return ctaButton;
				});
				// only add category to found item
			}
		});

		// ctaButtons = [
		// 	...ctaButtons,
		// 	...item.ctaButtonCollection.map((ctaButton) => ({
		// 		...ctaButton,
		// 		categories: [{ slug: stringToSlug(item.title) }],
		// 	})),
		// ];
	} else if (item._type === 'cta-button-document') {
		ctaButtons.push(item);
	}
});
---

<Layout
	locale={locale}
	metaData={pageData.metaData}
	mastheadHighlight
	alternativeTranslations={pageData.alternatives}
	type={pageData.type}
>
	<Hero
		title={pageData.hero.title}
		image={pageData.hero.image}
		chapeau={pageData.hero.chapeau}
		updatedAt={pageData.hero.showUpdatedAt ? pageData.updatedAt : undefined}
		highlight
	>
		<UpdatedAt slot="prefix" time={pageData.updatedAt} />
		<ContentBlock value={pageData.hero.content} />
	</Hero>

	<Layer
		pullUpBy="hero"
		background={pageData.taleCollection && pageData.taleCollection.length > 0
			? 'ijsblauw'
			: undefined}
		id="situaties"
	>
		{
			ctaButtons?.filter((item) => item.label).length ? (
				<Retain>
					<Stack>
						<Heading>
							{ctaButtons.length > 1
								? `${ctaButtons.length} ${siteSettings.genericLabels.situationPlural.that}`
								: `${ctaButtons.length} ${siteSettings.genericLabels.situationPlural.this}`}{' '}
							{pageData.titleFlow}
						</Heading>

						<CTAButtonOverview
							categories={filters}
							items={ctaButtons}
							enableFilter
						/>
					</Stack>
				</Retain>
			) : null
		}
	</Layer>

	{
		pageData?.taleCollection?.length ? (
			<Layer>
				<Retain>
					<TaleList taleCollection={pageData.taleCollection} />
				</Retain>
			</Layer>
		) : null
	}

	{
		pageData.assistance && (
			<Layer>
				<Retain>
					<Assistance feedback {...pageData.assistance} />
				</Retain>
			</Layer>
		)
	}
</Layout>
<style lang="scss">
	@use '@design-system-styles/primitives/_responsive.scss';

	.grid-questions {
		--grid-fluid-min-item-size: 20rem; // 400px
		--grid-fluid-gap: var(--stack-small);
	}
</style>
