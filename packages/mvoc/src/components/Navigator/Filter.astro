---
import { FieldInputText } from '@design-system/components/Form/FieldInputText';
import { Stack } from '@design-system/components/Layout/Stack';
import { Control } from '@design-system/elements/Control';
import { Icon } from '@design-system/elements/Icon';
import type { HTMLAttributes } from 'astro/types';
import type { LocationsPageProps } from 'src/utilities/api';
import type { SiteSettingsProps } from 'src/utilities/api/queries';
import { useSiteSettings } from 'src/utilities/api/queries';
import { getLocaleFromURL } from 'src/utilities/locale/translation';

interface Props extends HTMLAttributes<'form'> {
	pageData: LocationsPageProps;
}

const { class: className, pageData, ...attrs } = Astro.props;
const locale = getLocaleFromURL(Astro.url.pathname);
const siteSettings: SiteSettingsProps = await useSiteSettings({
	locale,
});
---

<form
	class={`c-filter${className ? ` | ${className}` : ''}`}
	{...attrs}
	data-module="filter"
>
	<Stack>
		<fieldset class="c-filter__wrap-search">
			<FieldInputText
				type="search"
				id="search"
				label={pageData.filter.searchLabel}
				placeholder={`${pageData.filter.searchLabel}â€¦`}
				icon="looking-glass"
				clearable
				hideLabel
			/>
			<button
				class="c-filter__map-toggle"
				type="button"
				data-module-bind="navigator__map-toggle"
			>
				<span hidden data-list>
					<Icon name="list" />
					{siteSettings.genericLabels.list}
				</span>
				<span data-map>
					<Icon name="marker" />
					{siteSettings.genericLabels.map}
				</span>
			</button>
		</fieldset>

		<fieldset>
			<Stack gap={2}>
				<div class="c-filter__wrap-controls">
					<legend class="c-filter__legend">{siteSettings.forms.filterOn}</legend
					>
					<Control
						type="checkbox"
						name="filter"
						value="status-open"
						id="status-open"
					>
						{pageData.location.openingHours.openNow}
					</Control>
				</div>
			</Stack>
		</fieldset>
	</Stack>
</form>

<style lang="scss">
	@use '@design-system-styles/primitives/_responsive.scss';
	@use '@design-system-styles/tools/_a11y.scss';

	.c-filter {
	}

	.c-filter__wrap-search {
		display: flex;
		gap: var(--space-4);

		:global(.c-field-wrapper) {
			flex: auto;
		}
	}

	.c-filter__wrap-controls {
		display: flex;
		flex-wrap: wrap;
		gap: var(--space-4);
	}

	.c-filter__legend {
		--legend-font-size: var(--font-size-root);
		--legend-line-height: var(--font-lineheight-root);
	}

	.c-filter__map-toggle {
		color: var(--color-donkerblauw);

		&:focus {
			@include a11y.focusring;
		}

		> span:not([hidden]) {
			display: flex;
			align-items: center;
			gap: var(--space-2);
		}

		@media (--mq-large) {
			display: none;
		}
	}
</style>
