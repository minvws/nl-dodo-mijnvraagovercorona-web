---
import { type HTMLAttributes } from 'astro/types';
import { getLocaleFromURL } from '@dodo/ui/helpers';
import { Link, Icon } from '@dodo/ui/elements';

interface Props extends HTMLAttributes<'nav'> {
	items: {
		slug: string;
		title: string;
	}[];
}

const { items, class: className, ...attrs } = Astro.props;

const locale = getLocaleFromURL(Astro.url.pathname);
---

<nav class={`c-breadcrumbs${className ? ` | ${className}` : ''}`} {...attrs}>
	<ol
		class={`c-breadcrumbs__list${
			items.length === 1 ? '  c-breadcrumbs__list--single-item' : ''
		}`}
		role="list"
	>
		<li class="c-breadcrumbs__item c-breadcrumbs__item--home">
			<Icon
				class="c-breadcrumbs__icon c-breadcrumbs__icon--previous"
				name={'chevron-small-left'}
			/>
			<Link class="c-breadcrumbs__link" href={locale.urlPrefix}>Home</Link>
			<Icon
				class="c-breadcrumbs__icon c-breadcrumbs__icon--next"
				name={'chevron-small-right'}
			/>
		</li>
		{
			items.map((item, index) => (
				<li
					class={`c-breadcrumbs__item${
						index === items.length - 2 ? '  c-breadcrumbs__item--previous' : ''
					}`}
				>
					{index === items.length - 2 ? (
						<Icon
							class="c-breadcrumbs__icon  c-breadcrumbs__icon--previous"
							name={'chevron-small-left'}
						/>
					) : null}
					<Link
						class="c-breadcrumbs__link"
						href={`${locale.urlPrefix}/${items
							.slice(0, index + 1)
							.map((item) => item.slug)
							.join('/')}`}
						aria-current={index === items.length - 1 ? 'location' : undefined}
						data-module-bind="breadcrumbs__item"
					>
						{item.title}
					</Link>
					{index === items.length - 1 ? null : (
						<Icon
							class="c-breadcrumbs__icon  c-breadcrumbs__icon--next"
							name={'chevron-small-right'}
						/>
					)}
				</li>
			))
		}
	</ol>
</nav>

<style lang="scss">
	@use '@dodo/ui/styles/tools/rem';

	.c-breadcrumbs {
		--c-breadcrumbs-gap: var(--breadcrumbs-gap, var(--space-1));
		container: breadcrumbs-container / inline-size;
		display: block;
		margin-block-end: var(--space-4);
		font-size: var(--breadcrumbs-font-size, var(--font-size-milli));
		line-height: var(--breadcrumbs-line-height, var(--line-height-milli));
	}

	.c-breadcrumbs__list {
		--c-breadcrumbs-color: var(--breadcrumbs-color, var(--color-diepblauw));
		display: block;
		color: var(--c-breadcrumbs-color);
	}

	.c-breadcrumbs__item {
		display: var(--c-breadcrumbs-item-display, none);
		gap: var(--c-breadcrumbs-gap);

		&:last-of-type {
			font-weight: 700;
		}
	}

	.c-breadcrumbs__icon.c-breadcrumbs__icon {
		display: var(--c-breadcrumbs-icon-display, none);
	}

	/**
	 * Only show the previous item & icons when there are more than one items and the container is small
	 */
	:where(:not(.c-breadcrumbs__list--single-item))
		.c-breadcrumbs__item--previous {
		--c-breadcrumbs-item-display: inline-flex;
	}

	.c-breadcrumbs__icon--next {
		--c-breadcrumbs-icon-display: none;
	}

	.c-breadcrumbs__icon--previous {
		--c-breadcrumbs-icon-display: block;
	}

	/**
	 * The actual link
	 */
	.c-breadcrumbs__link.c-breadcrumbs__link {
		--link-color: var(--c-breadcrumbs-color);
		--link-text-decoration: none;

		&:hover {
			--link-color: var(--c-breadcrumbs-color);
			--link-text-decoration: underline;
		}
	}

	/**
	 * Modifier: single item
	 * When there is only one item, we show the home item
	 */
	.c-breadcrumbs__list--single-item {
		.c-breadcrumbs__item--home {
			--c-breadcrumbs-item-display: inline-flex;
		}
	}

	/**
	 * Responsive: large screens
	 * We show the next icon on large sizes and show all the items
	 */
	@container breadcrumbs-container (inline-size > #{rem.convert(664px)}) {
		.c-breadcrumbs__list {
			--c-breadcrumbs-color: var(--color-grijs-8);
		}

		.c-breadcrumbs__icon--next {
			--c-breadcrumbs-icon-display: block;
		}

		.c-breadcrumbs__icon--previous {
			--c-breadcrumbs-icon-display: none;
		}

		.c-breadcrumbs__item {
			--c-breadcrumbs-item-display: inline-flex;
		}
	}
</style>
